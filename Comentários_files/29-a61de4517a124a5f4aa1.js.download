(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{gIKX:function(e,t,s){"use strict";s.d(t,"c",(function(){return h})),s.d(t,"a",(function(){return b})),s.d(t,"b",(function(){return v}));s("dY8P"),s("5uNO"),s("w0/N");var i=s("Llzl"),a=s("t3AZ"),r=s("XGja"),o=s("o5Lu"),n=s("dd1C"),l=s("+4Px"),p=s("TnpK"),d=s("p7NW"),c=s("u9Ip");s.d(t,"d",(function(){return c}));var u=s("RjAI");const h="ultra.components.directives.grade.input.baseInput",g="wrapping-input-style-focus";class m{constructor(e,t,s,i,a,r,o,n,l){this.$q=e,this.$injector=t,this.scope=s,this.element=i,this.form=a,this.bbLocalize=r,this.grade=o,this.timeout=n,this.ultraState=l,this.wrapperDiv=this.element.find(".wrapping-input-style"),this.inputElement=this.wrapperDiv.find("input"),this.gradeDisplayItem=this.instantiateGradeDisplayItem(),this.isSaving=!1,this.onDismissCallback=()=>{this.gradeDialog.isVisible=!1,this.form[this.scope.id].$setPristine(),this.inputElement.blur()},this.onSuccessCallback=()=>{this.gradeDialog.isVisible=!1,this.validateAndSave(!0).finally((()=>{this.setFocusOnNextTabbableElement()}))},this.setupWatches(),this.scope.readonly&&this.scope.readonly()||this.setupInputListeners(),this.element.foundation(),this.buildGradeDialog()}buildGradeDialog(){this.gradeDialog={isVisible:!1,textContent:{title:this.getStringFromLocale("components.directives.grade.grade-input.clearConfirmationDialog.title"),body:this.getStringFromLocale("components.directives.grade.grade-input.clearConfirmationDialog.body"),secondaryButtonText:this.getStringFromLocale("components.directives.grade.grade-input.clearConfirmationDialog.secondaryButtonText"),primaryButtonText:this.getStringFromLocale("components.directives.grade.grade-input.clearConfirmationDialog.primaryButtonText")},onDismiss:this.onDismissCallback,onSuccess:this.onSuccessCallback}}getStringFromLocale(e){return this.bbLocalize.translateSync({key:e,locale:this.bbLocalize.getLocale(this.scope)})}afterSave(e){this.gradeDisplayItem.displayGrade=e.displayGrade}shouldClearAttemptsGrade(){return this.isGradeErased()&&(this.scope.column().isAssignment()||this.scope.column().isDiscussion())}clickGradeNotation(e){this.inputElement.val(e.code),this.perfCodeId=e.id}createGradeSubmissionNow(){var e,t;const s=this.grade.parseGrade(this.gradeDisplayItem.displayValue,this.gradeDisplayItem.schema,this.scope),i=this.grade.createGradeSubmission(this.scope.column(),s,this.gradeDisplayItem.schema);if(this.perfCodeId&&(i.perfCodeId=this.perfCodeId),this.isGradeErased()&&(i.clearGrade=!0,i.attemptId=null===(e=this.scope.attempt)||void 0===e?void 0:e.id,this.isRubricAssociated())){const e=null===(t=this.scope.attempt)||void 0===t?void 0:t.rubricEvaluation;e&&(e.cells=[]),i.setGradeToEmpty=!0,i.rubricEvaluation=e}return i}getAriaLabelKey(e,t){let s="components.directives.grade.grade-input.aria.";return s+=t?"overrideScoreInput":"scoreInput",s+=e?"Group":"",s+=this.gradeDisplayItem.displayValue?"Graded":"Empty",s}getAriaLabel(e,t){return this.scope.inputAriaLabel?this.scope.inputAriaLabel:this.bbLocalize.translateSync({key:this.getAriaLabelKey(e,t),params:{user:this.scope.forUser&&this.scope.forUser(),group_name:this.scope.forGroup&&this.scope.forGroup()&&this.scope.forGroup().title,grade:this.scope.input.gradeDisplayItem.displayValue,total:this.scope.column&&this.scope.column()&&this.scope.column().possible},locale:this.bbLocalize.getLocale(this.scope),noWrap:!0})}getWatchGroup(){return["column().gradingSchemaId"]}isGradeErased(){const e=this.form[this.scope.id];return(null==e?void 0:e.$dirty)&&this.gradeDisplayItem.wasValueErased}isRubricAssociated(){return this.scope.column().hasRubricAssociation()}onFocus(){this.form[this.scope.id].$valid&&(this.gradeDisplayItem.displayValue=this.gradeDisplayItem.parsedValue)}openRubricEvaluation(){const e=this.getRubricEvalStateAndArgs();!this.isRubricAssociated()||null===e||this.scope.disableRubricEvalClick&&this.scope.disableRubricEvalClick()||(this.ultraState.current.name.endsWith("peek.assessment-submission-feedback")&&this.ultraState.leavePeekState(this.ultraState.current.name),this.timeout((()=>{this.ultraState.goPeekState(e.state,e.args)}),this.scope,0,!1))}refreshInputBox(){const e=this.scope.column().gradingSchemaId;this.gradeDisplayItem.schema.id!==e&&this.gradeDisplayItem.init(this.scope.column())}setupGradeSubmission(){return this.$q.when(this.createGradeSubmissionNow())}shouldShowTotalPoints(){const e=this.form[this.scope.id],t=this.form[this.scope.id];return(this.gradeDisplayItem.shouldShowTotalPoints()||this.hasFocus()||null!=e&&t.$dirty)&&!this.gradeDisplayItem.hasPerfCode()}updateGradeColor(){var e,t,s,i;this.wrapperDiv.removeClass(this.inputColorClass),!this.gradeDisplayItem.displayValue||(null===(t=(e=this.scope).isGroupGradeMultiple)||void 0===t?void 0:t.call(e))||(null===(i=(s=this.scope).isGroupGradeInProgress)||void 0===i?void 0:i.call(s))||(this.inputColorClass=this.gradeDisplayItem.getGradeColor(),this.wrapperDiv.addClass(this.inputColorClass))}validateAndSave(e){if(!this.isGradeErased()||e||this.isGradeErased()&&!this.scope.hasRubricClearConfirmationCallout){if(this.wrapperDiv.removeClass(g),this.scope.$emit("grade-input-blur",this.scope.id),this.form[this.scope.id].$valid)if(this.form[this.scope.id].$dirty||this.perfCodeId){if(!this.isReservedWord(this.form[this.scope.id].$viewValue)){const e=this.save().then((e=>{this.form[this.scope.id].$setPristine(),this.scope.$emit("bb-grade-input-save",e,this.scope.column().id),this.refreshInputBox()})).finally((()=>{this.isSaving=!1}));return this.gradeDialog.isVisible=!1,e}this.wrapperDiv.removeClass(this.inputColorClass)}else this.refreshInputBox(),this.gradeDialog.isVisible=!1}else this.isSaving||(this.gradeDialog.isVisible=!0)}setGradeAndSave(e){null==this.gradeDisplayItem.displayValue&&null!=this.scope.attempt.grade||(this.updateScopeAndItemGrade(e),this.undoRubricOverride=!0,this.save().finally((()=>{this.isSaving=!1})))}updateWithNewGrade(e){const t=null==e?"":String(e);this.gradeDisplayItem.displayValue!==t&&this.updateScopeAndItemGrade(e)}updateScopeAndItemGrade(e){this.scope.gradeDetail&&(this.scope.gradeDetail.displayGrade.score=e),this.gradeDisplayItem&&(this.gradeDisplayItem.displayGrade={score:e}),this.updateGradeColor()}save(){return this.isSaving=!0,this.setupGradeSubmission().then((e=>{const t=e,s=this.scope.forUser&&this.scope.forUser().id,i=this.scope.forGroup&&this.scope.forGroup();return!this.isRubricAssociated()||t.clearGrade||this.scope.column().anonymousGrading||(t.attemptId=null),this.scope.gradeDetail&&!this.gradeDisplayItem.displayValue&&(this.scope.gradeDetail.displayGrade.score=void 0),this.grade.saveGrade(t,this.scope.gradeDetail,null,{userId:s,group:i}).then((e=>{var s;if(this.afterSave(e),this.isRubricAssociated()&&this.undoRubricOverride&&this.scope.$emit(d.b),this.isRubricAssociated()&&!this.undoRubricOverride){const i=this.scope.column().isGroupContent()?null===(s=e[0])||void 0===s?void 0:s.displayGrade.score:t.gradeValue.grade;this.scope.$emit(d.d,null!=i?i:"")}return this.undoRubricOverride=!1,e}))}))}validate(){const e=this.grade.createGradeSubmission(this.scope.column(),this.gradeDisplayItem.displayValue,this.gradeDisplayItem.schema),t=this.grade.validateGrade(e,this.scope);return this.$q.when(t).then((e=>{this.form[this.scope.id].$setValidity("invalidGrade",e)}))}hasFocus(){return this.inputElement.is(":focus")||this.wrapperDiv.hasClass(g)}isReservedWord(e){if(!e)return!1;const t=this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.scope),key:"components.services.grade.multiple"}).toLocaleLowerCase(),s=this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.scope),key:"components.services.grade.in_progress"}).toLocaleLowerCase(),i=e.toLocaleLowerCase();return i===t||i===s}setFocusOnNextTabbableElement(){this.timeout((()=>{r.b()}),this.scope,0,!1)}setupInputListeners(){this.wrapperDiv.on("click",(()=>{this.isRubricEvalMode()||(this.wrapperDiv.addClass(g),this.inputElement.focus(),this.inputElement.select())})),this.inputElement.on("focus",(()=>{this.wrapperDiv.addClass(g),this.inputElement.select(),this.scope.$emit("grade-input-in-focus",this.scope.id)})),this.inputElement.on("keydown",(e=>{if(e.keyCode===l.f||e.keyCode===l.m||e.keyCode===l.u&&!e.shiftKey){if(e.preventDefault(),this.gradeDialog.isVisible)return;this.setFocusOnNextTabbableElement()}}))}setupLocalizedErrorMessage(){this.scope.column().externalGrade?this.localizedErrorMessageKey="components.directives.grade.grade-input.errorMessage.overallGrade":this.localizedErrorMessageKey="components.directives.grade.grade-input.errorMessage.default"}setupWatches(){this.scope.$watch("::column()",(e=>{e&&this.gradeDisplayItem.init(e).then((()=>{this.setupWatchGroup(),this.setupLocalizedErrorMessage()}))}))}setupWatchGroup(){this.scope.$watchGroup(this.getWatchGroup(),(()=>{this.isSaving||this.refreshInputBox()}))}get totalPoints(){return this.scope.column().isCalculated()?100:this.scope.column().possible}}class b extends m{getAriaLabelKey(e){return super.getAriaLabelKey(!0,e)}getWatchGroup(){return super.getWatchGroup().concat(["isGroupGradeInProgress()","isGroupGradeMultiple()"])}shouldShowTotalPoints(){return super.shouldShowTotalPoints()&&!(this.scope.isGroupGradeInProgress()||this.scope.isGroupGradeMultiple())}}class v extends m{getAriaLabelKey(e){return super.getAriaLabelKey(!1,e)}}i.module(h,["puElasticInput",a.a,o.m,n.a,p.b,u.a])},u9Ip:function(e,t){e.exports='<div class="grade-input-wrapper" ng-class="{\'has-validation-error\': !!input.form[id].$invalid}">\n  <div ng-attr-id="{{hasRubricClearConfirmationCallout ? \'base-input-container-callout-dialog\' : \'\'}}"  class="left">\n    <bb-inline-validation\n      show-error="!!input.form[id].$invalid"\n      bb-translate-attrs="{ \'error-message\': localizedErrorMessageKey }"\n      ng-show="input.shouldShowInput()">\n\n      <div\n        ng-class="{\'show-total\': input.shouldShowTotalPoints(), \'is-multiple\': isGroupGradeMultiple(), \'is-in-progress\': isGroupGradeInProgress(), \'group-grade-input\': !!forGroup(), \'readonly\': readonly()}"\n        class="js-pill-box wrapping-input-style">\n        <div bb-foundation-defer>\n          <div class="wrapping-editable-input">\n            <bb-svg-icon size="small" icon="rubric" ng-if="input.isRubricEvalMode()"></bb-svg-icon>\n\n            <input name="{{::id}}" autocomplete="off"\n              ng-class="{\'group-multiple\': isGroupGradeMultiple(), \'group-in-progress\': isGroupGradeInProgress()}"\n              pu-elastic-input pu-elastic-input-minwidth="10px" pu-elastic-input-maxwidth="180px"\n              pu-elastic-input-width-delta="8" type="text" placeholder="--" aria-label="{{ input.getAriaLabel() }}"\n              aria-readonly="{{ readonly() }}" ng-model="input.gradeDisplayItem.displayValue" ng-readonly="readonly()"\n              data-dropdown="performanceCodes-{{id}}" title="{{input.gradeDisplayItem.perfCodeDesc}}"\n              ng-blur="input.validateAndSave()" ng-change="input.validate()" ng-focus="input.onFocus()"\n              class="js-grade-input" analytics-id="components.directives.grade.performanceCode.input.text">\n\n            <bb-confirmation-callout-dialog\n              ng-if="hasRubricClearConfirmationCallout"\n              analytics-id="components.directives.grade.clearRubricConfirmation"\n              target="\'#base-input-container-callout-dialog\'"\n              is-visible="input.gradeDialog.isVisible"\n              text-content="input.gradeDialog.textContent"\n              on-dismiss="input.gradeDialog.onDismiss"\n              on-success="input.gradeDialog.onSuccess"\n            ></bb-confirmation-callout-dialog>\n\n          </div>\n\n          <ul ng-if="::canOverrideByGradeNotation()" id="performanceCodes-{{id}}"\n            class="f-dropdown performance-code-options" data-dropdown-content>\n            <li class="performance-option-header" bb-translate>\n              components.directives.grade.grade-input.selectPerformanceCode</li>\n            <li ng-repeat="perfCode in gradeNotations()">\n              <a href="javascript:void(0);" ng-click="input.clickGradeNotation(perfCode)"\n                class="performance-code-option" title="{{perfCode.description}}"\n                analytics-id="components.directives.grade.performanceCode.link">\n                <span class="code">{{perfCode.code}}</span>\n                <span class="description">{{perfCode.description}}</span>\n              </a>\n            </li>\n          </ul>\n        </div>\n\n        \x3c!--TOTAL POINTS--\x3e\n        \x3c!-- Fix ULTRA-15280.\n        If there is gradeDetail, we should use its pointsPossible as the total.there are 2 cases:\n        - for overall grade (and calculations), we use the default value 100,\n        - for common column, assignment, etc. we use column.possible. --\x3e\n        <span ng-if="input.shouldShowTotalPoints() && input.shouldShowInput()" class="points-text" bb-translate\n          translate-values="{total: input.totalPoints}">\n          components.directives.grade.grade-input.points\n        </span>\n      </div>\n    </bb-inline-validation>\n\n    <a ng-show="!input.shouldShowInput()" class="has-rubric text wrapping-input-style readonly"\n      ng-class="{\'show-total\': input.shouldShowTotalPoints(), \'is-multiple\': isGroupGradeMultiple(), \'is-in-progress\': isGroupGradeInProgress(), \'group-grade-input\': !!forGroup(), \'disable-click\': !!disableRubricEvalClick()}"\n      aria-disabled="{{disableRubricEvalClick()}}"\n      ng-click="input.openRubricEvaluation()" href="javascript:void(0);"\n      analytics-id="components.directives.grade.openRubric.link">\n      <span>\n        \x3c!--TODO: Figure out srUsername --\x3e\n        <span class="sr-only" bb-translate translate-values="{username: input.srUsername}">components.directives.grade.grade-input.rubricButtonAlt</span>\n        <bb-svg-icon size="small" icon="rubric"></bb-svg-icon>\n        <span name="{{id}}" class="grade-point-value" ng-class="{\'group-multiple\': isGroupGradeMultiple(), \'group-in-progress\': isGroupGradeInProgress()}">\n          {{input.gradeDisplayItem.displayValue || \'--\'}}&nbsp;\n        </span>\n\n        \x3c!--TOTAL POINTS--\x3e\n        <span ng-if="input.shouldShowTotalPoints() && !input.shouldShowInput()" class="points-text" bb-translate\n          translate-values="{total: input.totalPoints}">\n          components.directives.grade.grade-input.points\n        </span>\n      </span>\n    </a>\n  </div>\n  <div ng-if="showOverrideIndicator()" class="left">\n    <span class="override-indicator" bb-translate>components.directives.grade.grade-input.overrideIndicator</span>\n  </div>\n</div>\n'},"w0/9":function(e,t,s){"use strict";s.d(t,"a",(function(){return c}));var i=s("Llzl"),a=s("gIKX"),r=s("0JpG"),o=s("yMoE"),n=s("o5Lu"),l=s("8jzW"),p=s("lEL+"),d=s("TnpK");const c="ultra.components.directives.grade.input.groupAttemptGradeInput";class u extends a.a{constructor(e,t,s,i,a,r,o,n,l,p){super(e,t,s,i,a,r,o,n,l),this.scope=s,this.bbLocalize=r,this.scoreProviderHelper=p,this.scope.isGroupGradeMultiple=()=>!1,this.scope.isGroupGradeInProgress=()=>!1}afterSave(e){this.gradeDisplayItem.displayGrade=e.displayGrade,this.scope.attempt.displayGrade=e.displayGrade}getRubricEvalStateAndArgs(){var e,t,s;const i={attemptId:null!==(e=this.scope.attempt.groupAttemptId)&&void 0!==e?e:this.scope.attempt.id,userId:this.ultraState.params.userId,columnId:this.scope.column().id,groupId:null!==(s=null===(t=this.scope.forGroup())||void 0===t?void 0:t.id)&&void 0!==s?s:this.ultraState.params.groupId,courseId:this.scope.column().courseId,gradeId:null,groupAttemptId:this.scope.attempt.groupAttemptId,contentId:this.scope.column().contentId};return{state:this.scoreProviderHelper.gradingWithRubricStateRef(this.scope.column().scoreProviderHandle,i,null),args:i}}getWatchGroup(){return super.getWatchGroup().concat(["attempt.id","attempt.displayGrade"])}instantiateGradeDisplayItem(){return this.$injector.instantiate(o.a,{gradeDetail:null,scope:this.scope})}isRubricEvalMode(){return this.isRubricAssociated()}shouldShowInput(){return!this.isRubricEvalMode()||this.isRubricEvalMode()&&this.scope.enableEditableInputMode}refreshInputBox(){this.$q.when(this.bundlePromise).then((()=>{super.refreshInputBox();const e=this.scope.attempt&&this.scope.attempt.displayGrade;this.scope.isGroupGradeInProgress()?(this.gradeDisplayItem.displayValue=this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.scope),key:"components.services.grade.in_progress"}),this.gradeDisplayItem.parsedValue=""):this.scope.isGroupGradeMultiple()?(this.gradeDisplayItem.displayValue=this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.scope),key:"components.services.grade.multiple"}),this.gradeDisplayItem.parsedValue=""):e&&(this.gradeDisplayItem.displayGrade=e),this.updateGradeColor()}))}setupGradeSubmission(){const e=this.createGradeSubmissionNow();return e.groupAttemptId=this.scope.attempt.id,e.clearGrade&&(e.setAttemptToEmpty=!0),this.$q.when(e)}shouldShowTotalPoints(){return!0}}u.$inject=["$q","$injector","scope","element","form",r.serviceName,n.n,p.b,d.d,l.c];class h{constructor(e){this.$injector=e,this.restrict="E",this.template=a.d,this.require="^form",this.scope={column:"&",forGroup:"&",attempt:"=",gradeDetail:"=",disableRubricEvalClick:"&?",id:"@",inputAriaLabel:"@?",isGroupGradeMultiple:"&?",isGroupGradeInProgress:"&?",enableEditableInputMode:"&?",readonly:"&"},this.link=(e,t,s,i)=>{e.input=this.$injector.instantiate(u,{scope:e,element:t,form:i})}}}h.$inject=["$injector"],i.module(c,[a.c]).directive("bbGroupAttemptGradeInput",["$injector",e=>e.instantiate(h)])}}]);
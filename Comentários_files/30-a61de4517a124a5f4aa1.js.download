(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{"1xiy":function(e,t,i){"use strict";i.d(t,"a",(function(){return p}));var a=i("Llzl"),n=i("gIKX"),s=i("0JpG"),r=i("yMoE"),o=i("o5Lu"),d=i("lEL+"),c=i("TnpK"),l=i("zGdY");const p="ultra.components.directives.grade.input.groupFinalGradeInput";class g extends n.a{constructor(e,t,i,a,n,s,r,o,d){super(e,t,i,a,n,s,r,o,d),this.$injector=t,this.scope=i,this.bbLocalize=s}afterSave(e){this.scope.grade.displayGrade=e[0].displayGrade,this.scope.grade.isMultipleGradesInGroup=!1,this.scope.grade.manualStatus=l.Eb.ReadyToPost}getAriaLabelKey(){return super.getAriaLabelKey(this.scope.showOverrideIndicator&&this.scope.showOverrideIndicator())}getRubricEvalStateAndArgs(){return null}getWatchGroup(){return super.getWatchGroup().concat(["grade.id","grade.displayGrade"])}instantiateGradeDisplayItem(){return this.$injector.instantiate(r.a,{scope:this.scope,gradeDetail:this.scope.grade})}isRubricEvalMode(){return!1}shouldShowInput(){return!0}refreshInputBox(){this.$q.when(this.bundlePromise).then((()=>{super.refreshInputBox();const e=this.scope.grade&&this.scope.grade.displayGrade;this.scope.isGroupGradeInProgress()?(this.gradeDisplayItem.displayValue=this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.scope),key:"components.services.grade.in_progress"}),this.gradeDisplayItem.parsedValue=""):this.scope.isGroupGradeMultiple()?(this.gradeDisplayItem.displayValue=this.bbLocalize.translateSync({locale:this.bbLocalize.getLocale(this.scope),key:"components.services.grade.multiple"}),this.gradeDisplayItem.parsedValue=""):e&&(this.gradeDisplayItem.displayGrade=e),this.updateGradeColor()}))}setupGradeSubmission(){const e=this.createGradeSubmissionNow(),t=[];return this.scope.forGroup().memberships&&this.scope.forGroup().memberships.forEach((e=>{e.ui&&e.ui.gradeDetail&&t.push(e.ui.gradeDetail.id)})),e.clearGrade&&(e.setGradeToEmpty=!0),e.gradeIds=t,this.$q.when(e)}get totalPoints(){return this.scope.grade.pointsPossible}}g.$inject=["$q","$injector","scope","element","form",s.serviceName,o.n,d.b,c.d];class m{constructor(e){this.$injector=e,this.restrict="E",this.template=n.d,this.require="^form",this.scope={column:"&",forGroup:"&",grade:"=",id:"@",inputAriaLabel:"@?",isGroupGradeMultiple:"&?",isGroupGradeInProgress:"&?",showOverrideIndicator:"&?"},this.link=(e,t,i,a)=>{e.input=this.$injector.instantiate(g,{scope:e,element:t,form:a})}}}m.$inject=["$injector"],a.module(p,[n.c]).directive("bbGroupFinalGradeInput",["$injector",e=>e.instantiate(m)])},"2EOe":function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var a=i("zYa8"),n=i("MDCe");const s="ultra.components.directives.bbUiIcon.small.SafeAssign";Object(a.a)(n.a,s,"bbUiIconSmallSafeAssign")},"5zK3":function(e,t){e.exports='<form name="{{::\'top_grading_bar\' + gradeDetail.id}}">\n  \x3c!-- TODO: LRN-194211 - Remove ng-class when the feature flag behind the property is removed. --\x3e\n  <div ng-class="{\'isGradingBarAttemptNavigationEnabled\': gradingBar.showAttemptSelector()}"\n       class="multiple-submissions-grading-bar aggregate-grading-bar"\n       bb-foundation-defer>\n    <div class="aggregate-grading-bar-inner">\n      <div class="aggregate-header">\n        <span class="aggregate-header-text" bb-translate>components.directives.grade.grading-bar.final-score</span>\n        <span ng-if="gradeDetail.isPosted()" class="details ellipsis posted">\n          <span class="posted-text" bb-translate>components.directives.grade.grading-bar.posted-no-date</span>\n        </span>\n        <span class="aggregate-header-sub-text" bb-translate>{{::gradingBar.getAggregationModelLabelKey()}}</span>\n      </div>\n      <div class="aggregate-grading-controls">\n        <div class="grade-pill-container">\n          <div>\n            <bb-user-final-grade-input ng-if="::gradingBar.shouldShowFinalGradeInput() && !column().isGroupContent()"\n                                      class="pill-position"\n                                      ng-hide="hideGrade()"\n                                      id="user-final-grade-input"\n                                      column="::column()"\n                                      grade="gradeDetail"\n                                      for-user="::user()"\n                                      readonly="::!gradingBar.canGrade() || gradeDetail.isExempt"\n                                      show-override-indicator="false">\n            </bb-user-final-grade-input>\n            <bb-group-final-grade-input ng-if="::gradingBar.shouldShowFinalGradeInput() && column().isGroupContent()"\n                                        column="::column()"\n                                        class="pill-position"\n                                        id="group-final-grade-input"\n                                        for-group="row.group"\n                                        grade="gradeDetail"\n                                        readonly="::!gradingBar.canGrade() || gradeDetail.isExempt"\n                                        is-group-grade-multiple="gradeDetail.isMultipleGradesInGroup"\n                                        is-group-grade-in-progress="gradeDetail.isInProgress()"\n                                        show-override-indicator= "false">\n            </bb-group-final-grade-input>\n\n            <div class="undo-override" ng-if="gradingBar.shouldShowUndoOverride()" ng-switch="gradingBar.canGrade()">\n              <a ng-switch-when="true"\n                ng-if="!gradeDetail.isPastDueZero()"\n                href="javascript:void(0);"\n                data-class="js-undo-override"\n                ng-click="gradingBar.undoOverride()"\n                bb-translate\n                analytics-id="components.directives.grade.grading-bar.undo-override">components.directives.grade.grading-bar.undo-override</a>\n              <span ng-switch-default class="override-indicator" bb-translate>components.directives.grade.grading-bar.readonly-override</span>\n              <span ng-if="gradeDetail.isPastDueZero()" class="override-indicator" bb-translate>components.directives.grade.grid.pastDueZero</span>\n            </div>\n          </div>\n          <span ng-if="gradeDetail.isExempt" class="exempt" bb-translate>components.directives.grade.grade-input.exempt</span>\n        </div>\n      </div>\n\n      <bb-overflow-menu element-id="{{\'menu-open-button_\' + gradeDetail.id}}"\n                        element-name="{{gradingBar.getLocalizedTextByKey(\'components.directives.grade.grading-bar.final-score\')}}"\n                        menu-items="gradingBar.getOverflowMenuItems()"\n                        analytics-id-tag-prefix="components.directives.grade.grading-bar.overflowMenu">\n      </bb-overflow-menu>\n\n    </div>\n  </div>\n</form>\n'},"6SYN":function(e,t){e.exports='<form name="{{::\'top_grading_bar\' + attempt.id}}">\n    <div class="multiple-submissions-grading-bar attempt-grading-bar reconcile-attempt-bar" ng-class="{\'add-comment-expanded\': gradingBar.gradingCommentHandler.commentPanelOpen}" bb-foundation-defer>\n      <div\n        class="attempt-grading-bar-inner"\n        ng-class="{\'attempt-status-message-visible\': attemptStatus}"\n        ng-switch="gradingBar.hasPeekState()">\n\n        <a  href="javascript:void(0);"\n            class="attempt-info-container"\n            ng-switch-when="true"\n            ng-click="gradingBar.goToPeekState()"\n            analytics-id="components.directives.grade.gradingBar.goToPeekState.link">\n          <i class="icon submission-type-icon" bb-content-item-icon content-column="::column()"></i>\n          <div class="attempt-info">\n            <span id="reconcile-attempt-{{attempt.id}}" class="name ellipsis" ng-bind-html="::gradingBar.label"></span>\n              <span class="submission-details-wrap" ng-if="attempt">\n                \x3c!--submitted on time but not graded/posted--\x3e\n                <span class="details ellipsis submitted js-submitted-date" ng-if="!gradingBar.isSubmittedLate() && !attempt.isCompleted()" bb-translate translate-values="{date: attempt.attemptDate}">\n                  components.directives.grade.grading-bar.submit-date-without-timezone\n                </span>\n                \x3c!--submitted late but not yet graded/posted--\x3e\n                <span ng-if="gradingBar.isSubmittedLate() && !attempt.isCompleted()" class="show-hide-on-hover">\n                  <span class="details ellipsis submitted show-on-hover text-alert-ax js-submitted-late-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                    components.directives.grade.grading-bar.submit-late-date-without-timezone\n                  </span>\n                  <span class="details ellipsis hide-on-hover text-alert-ax js-submitted-late-date" bb-translate translate-values="{lateness: gradingBar.localizedLateness}">\n                    components.directives.grade.grading-bar.submit-lateness\n                  </span>\n                </span>\n                \x3c!--attempt has been graded/posted--\x3e\n                <span ng-if="attempt.isCompleted()" class="show-hide-on-hover">\n                  \x3c!--submitted on time--\x3e\n                  <span ng-if="gradingBar.isSubmittedLate()" class="details ellipsis submitted show-on-hover text-alert-ax js-submitted-late-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                    components.directives.grade.grading-bar.submit-late-date-without-timezone\n                  </span>\n                  \x3c!--submitted late--\x3e\n                  <span ng-if="!gradingBar.isSubmittedLate()" class="details ellipsis submitted show-on-hover js-submitted-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                    components.directives.grade.grading-bar.submit-date-without-timezone\n                  </span>\n                  <span class="details ellipsis hide-on-hover posted js-posted-indicator" bb-translate translate-values="{date: attempt.attemptLastGradedDate || \'\'}">\n                    components.directives.grade.grading-bar.posted-without-timezone\n                  </span>\n                </span>\n              </span>\n          </div>\n        </a>\n        <i ng-switch-default class="icon submission-type-icon" bb-content-item-icon content-column="::column()"></i>\n        <div ng-switch-default class="attempt-info">\n          <span class="name ellipsis" ng-bind-html="::gradingBar.label"></span>\n          <span class="submission-details-wrap" ng-if="attempt">\n            \x3c!--submitted on time but not graded/posted--\x3e\n            <span class="details ellipsis submitted js-submitted-date" ng-if="!gradingBar.isSubmittedLate() && !attempt.isCompleted()" bb-translate translate-values="{date: attempt.attemptDate}">\n              components.directives.grade.grading-bar.submit-date\n            </span>\n            \x3c!--submitted late but not yet graded/posted--\x3e\n            <span ng-if="gradingBar.isSubmittedLate() && !attempt.isCompleted()" class="show-hide-on-hover">\n              <span class="details ellipsis submitted show-on-hover text-alert-ax js-submitted-late-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                components.directives.grade.grading-bar.submit-late-date\n              </span>\n              <span class="details ellipsis hide-on-hover text-alert-ax js-submitted-late-date" bb-translate translate-values="{lateness: gradingBar.localizedLateness}">\n                components.directives.grade.grading-bar.submit-lateness\n              </span>\n            </span>\n            \x3c!--attempt has been graded/posted--\x3e\n            <span ng-if="attempt.isCompleted()" class="show-hide-on-hover">\n              \x3c!--submitted late--\x3e\n              <span ng-if="gradingBar.isSubmittedLate()" class="details ellipsis submitted show-on-hover text-alert-ax js-submitted-late-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                components.directives.grade.grading-bar.submit-late-date\n              </span>\n              \x3c!--submitted on time--\x3e\n              <span ng-if="!gradingBar.isSubmittedLate()" class="details ellipsis submitted show-on-hover js-submitted-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                components.directives.grade.grading-bar.submit-date\n              </span>\n              <span class="details ellipsis hide-on-hover posted js-posted-indicator" bb-translate translate-values="{date: attempt.attemptLastGradedDate || \'\'}">\n                components.directives.grade.grading-bar.posted\n              </span>\n            </span>\n          </span>\n          \x3c!-- BEGIN Enhance time limit --\x3e\n          <span class="information-about-time-limit show-hide-on-hover" ng-if="gradingBar.isShowExtraTime()">\n            <span class="exceeded-time attention hide-on-hover details small-medium-show">{{gradingBar.getExceedTime()}}</span>\n            <span class="questions-answered-correctly-after-time-limit attention show-on-hover details small-medium-hide" bb-translate translate-values="{count: gradingBar.getQuestionsAnsweredAfterSoftTimeLimit().length}">\n              components.directives.grade.grading-bar.questions-answered-after-soft-time-limit.plural\n            </span>\n          </span>\n          \x3c!--  END  Enhance time limit --\x3e\n        </div>\n\n        <div class="attempt-status-container" ng-if="attemptStatus">{{attemptStatus}}</div>\n\n        <div class="attempt-grading-actions">\n          \x3c!-- There is no override for non-group attempt grade. Therefore, if save-as-override is true, make the pill read-only --\x3e\n          <bb-user-attempt-grade-input\n            ng-class="{\'has-feedback\': gradingBar.canEnterGrades || gradingBar.canEnterFeedback || gradingBar.gradingCommentHandler.hasComment()}"\n            ng-hide="hideGrade()"\n            id="{{::\'attempt_\' + attempt.id}}"\n            input-aria-label="{{::gradingBar.getGradeInputAriaLabel()}}"\n            readonly="::(!gradingBar.canEnterGrades || saveAsOverride())"\n            column="::column()"\n            attempt="attempt"\n            for-user="::user()"\n            disable-rubric-eval-click="disableRubricAction">\n          </bb-user-attempt-grade-input>\n\n          \x3c!--When no comments exist this is either an \'add comment\' or \'empty comment\' button, otherwise it functions as a toggle button to bring the comments in/out of view--\x3e\n          <button class="toggle-feedback-button"\n                  ng-if="gradingBar.showCommentIcon()"\n                  ng-click="gradingBar.openFeedbackPanel()"\n                  ng-switch="gradingBar.getCommentIconType()"\n                  bb-translate-attrs="{\'aria-label\': \'components.directives.grade.grading-bar.reconciler-feedback.aria-label.feedback-toggle-button\'}"\n                  translate-attrs-values="{attempt_index: attemptIndex}"\n                  analytics-id="components.directives.grade.gradingBar.reconcilerFeedback.toggle.button">\n            <bb-svg-icon ng-switch-when="add" size="medium" icon="add-feedback"></bb-svg-icon>\n            <bb-svg-icon ng-switch-when="view" ng-show="gradingBar.hasComment()" size="medium" icon="feedback" status="active"></bb-svg-icon>\n            <bb-svg-icon ng-switch-default size="medium" icon="feedback"></bb-svg-icon>\n          </button>\n          <bb-overflow-menu ng-show="gradingBar.showOverflowMenu()"\n                            element-id="{{\'attempt-menu-open-button_\' + attempt.id}}"\n                            element-name="{{gradingBar.getLocalizedTextByKey(\'components.directives.grade.grading-bar.grade\')}}"\n                            menu-items="gradingBar.getOverflowMenuItems()"\n                            analytics-id-tag-prefix="components.directives.grade.grading-bar.reconcile-attempt-grading.overflowMenu">\n          </bb-overflow-menu>\n        </div>\n      </div>\n    </div>\n  </form>\n'},B8C9:function(e,t,i){var a=i("ziER"),n=i("5JeM"),s=new a({id:"icon-medium-menu",use:"icon-medium-menu-usage",viewBox:"0 0 24 24",content:'<symbol fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="icon-medium-menu"><path d="M4.5 12c0 .8284-.6716 1.5-1.5 1.5s-1.5-.6716-1.5-1.5.6716-1.5 1.5-1.5 1.5.6716 1.5 1.5zM13.5 12c0 .8284-.6716 1.5-1.5 1.5s-1.5-.6716-1.5-1.5.6716-1.5 1.5-1.5 1.5.6716 1.5 1.5zM22.5 12c0 .8284-.6716 1.5-1.5 1.5s-1.5-.6716-1.5-1.5.6716-1.5 1.5-1.5 1.5.6716 1.5 1.5z" stroke-width="3" stroke-miterlimit="10" /></symbol>'});n.add(s);e.exports=s},CCbZ:function(e,t,i){"use strict";(function(e){i.d(t,"a",(function(){return se}));var a=i("D57K"),n=(i("yOHj"),i("Gg10"),i("uj+y"),i("Lrq8"),i("jagb"),i("xoIb"),i("B8C9"),i("01PJ"),i("f4B+"),i("nsO7")),s=i("Llzl"),r=i("IbyE"),o=i("nmzr"),d=(i("Np64"),i("z6Q5")),c=i("IWgv"),l=i("J0Qq"),p=i("ap1t"),g=i("AVdi"),m=i("o5Lu"),u=(i("+4Px"),i("0JpG")),b=i("pjml"),h=i("wgY5"),v=i("5uPl"),w=i("JNtI"),f=i("p7NW"),O=i("TnpK"),x=i("MzGC"),S=i("w0/9"),D=i("Uw4B"),B=i("1xiy"),G=i("gkef"),j=i("2lxm"),y=i("X455"),L=i("nawZ"),I=i("ZQFV"),A=i("2EOe"),k=i("+O05"),E=i("Kpdw"),C=i("Tqav"),P=i("15AK"),R=i("aHpC"),$=i("uFkY"),z=i("rPCE"),T=i("X/qj"),M=i("oi1r"),U=i("jhBu"),F=i("9hUw"),N=i("12mu"),_=i("n0bV"),H=i("ohO4"),q=i("8jzW"),K=i("zGdY"),V=i("b2lU"),W=i("kwLz"),Q=i("5zK3"),X=i("vEAu"),J=i("FwQ6"),Z=i("gYaZ"),Y=i("ck5r"),ee=i("6SYN"),te=i("WByw"),ie=i("IoN1"),ae=i("Cs2n");const ne="toggleUserList",se="ultra.components.directives.grade.gradingBar";var re;function oe(e,t){return e.find(".grading-bar").append(t)}!function(e){e[e.Expanded=0]="Expanded",e[e.Collapsed=1]="Collapsed",e[e.NotRendered=2]="NotRendered"}(re||(re={}));class de{constructor(e,t,i,a,n,s,r,o,d,c){this.MAX_USERS_VISIBLE=5,this.userList=[],this.showDetail=!1,this.showAllUsers=!1,this.group=t,this.userList=null!=i?i:[],this.attempt=e,this.gradeGroupAttempts=e&&e.attempts,this.showDetail=a,this.showAllUsers=n,this.userCourseAvailabilities=s,this.canEnterGrades=r,this.canEnterFeedback=o,this._showCommentIconForFeedbackPanel=d,this.openFeedbackPanel=c}getGroupIndividualCommentIconType(e){return this.hasGroupIndividualComment(this.getIndividualAttempt(e))?"view":this.canAddComment()?"add":"empty"}getIndividualAttempt(e){if(this.group)return this.gradeGroupAttempts.find((t=>t.userId===e))}hasGroupIndividualComment(e){var t;return(null==e?void 0:e.overrideStatus)===K.j.FeedbackOverride&&!!(null===(t=e.feedbackToUser)||void 0===t?void 0:t.rawText)}isUserCourseAvailable(e){return null==this?void 0:this.userCourseAvailabilities[e]}slideChanged(e,t){var i;this.showDetail=!1,this.userList=null!==(i=null!=e?e:this.userList)&&void 0!==i?i:[],this._visibleUsersCount=Math.min(this.MAX_USERS_VISIBLE,this.userList.length),this.gradeGroupAttempts=(null!=t?t:this.attempt).attempts}get visibleUsersCount(){return void 0!==this._visibleUsersCount?this._visibleUsersCount:this.userList.length>this.MAX_USERS_VISIBLE?this.MAX_USERS_VISIBLE:this.userList.length}hiddenUsersCount(){return this.userList.length-this.MAX_USERS_VISIBLE}shouldShowMoreOrLess(){return this.userList.length>this.MAX_USERS_VISIBLE}showMoreOrLess(){return this.userList.length>(this._visibleUsersCount||0)?"More":"Less"}showMoreOrLessControl(){this._visibleUsersCount=this.userList.length>(this._visibleUsersCount||0)?this.userList.length:this.MAX_USERS_VISIBLE}showMoreOrLessTranslationKey(){return`components.directives.grade.grading-bar.userList.show${this.showMoreOrLess()}Users.plural`}toggleUserList(){this.showDetail=!this.showDetail,this.showDetail||(this._visibleUsersCount=Math.min(this.MAX_USERS_VISIBLE,this.userList.length))}groupAccordingStatus(){return!!this.showDetail}canAddComment(){return this.canEnterGrades||this.canEnterFeedback}showCommentIcon(){return this._showCommentIconForFeedbackPanel()}}let ce=class{constructor(e,t,i,a,n,s,d,c,l,p,g,m,u,b,h,v,w,f,O,x=!1){this.$q=e,this.$rootScope=t,this.scope=i,this.element=a,this.$compile=n,this.$sce=s,this.localize=d,this.ultraState=c,this.windowSize=l,this.originalityService=p,this.entitlementService=g,this.gradebookPermission=m,this.peerReviewService=u,this.$ngRedux=b,this.gradableItemUserOptionService=h,this.currentMembership=v,this.isDelegatedHandler=x,this.isGradingBarAttemptNavigationEnabled=!1,this.autoFocusAttemptSelector=!1,this.scoreProviderHelperService=null,this.updateAttemptFeedback=(e,t,i)=>{t&&this.scope.attempt&&this.scope.attempt.id===i.id&&(this.scope.attempt.feedbackToUser=t)},this.subscribeToReduxChanges(),this.deletingAttempt=!1,this.canEnterFeedback=this.gradebookPermission.canDelegatedEnterAttemptFeedback(this.scope.column(),this.scope.attempt),this.canEnterGrades=this.gradebookPermission.canDelegatedEnterAttemptGrades(this.scope.column(),this.scope.attempt),this.canOverrideGrades=this.entitlementService.isEntitled(I.q.AllGrading),this.fileUtil=new V.a(this.localize,this.$q),this.scope.column().peerGrading&&(this.peerReviewContentObjectPromise=this.peerReviewService.getOrCreatePeerContentWithAttemptsFromColumn(this.scope.column()).then((e=>{this.canEnterGrades=this.canEnterGrades||!!(null==e?void 0:e.canPeerAddFeedbackToAttempt(this.scope.column(),this.scope.attempt)),this.peerReviewContentObject=e}))),x||(this.scope.gradingBar=this,this.setTemplate()),Object($.d)(this.scope,this.updateAttemptFeedback),this.toolAttemptDetailItemEx=this.scope.attempt&&this.scope.attempt.toolAttemptDetail&&this.scope.attempt.getToolAttemptDetailItemEx(this.scope.column().scoreProviderHandle),this.fetchStudentDueDateExceptions(),this.setLocalizedLateness(),w.createWaiter(r.r.GradingBarAttemptNavigation).then((e=>{this.isGradingBarAttemptNavigationEnabled=e,this.isGradingBarAttemptNavigationEnabled&&(this.setOrReloadAttemptsAndSetSelectionOptions(),this.attemptSelectionOnChange=this.goToSelectedAttempt.bind(this),c.prev.name.includes(o.x.SUBMISSION_GRADING)&&(this.autoFocusAttemptSelector=!0),this.ultraState.search("isGradingBarAttemptNavigationEnabled","true"),this.scope.$on("grade-post-ready-attempts",this.setOrReloadAttemptsAndSetSelectionOptions.bind(this)))})),f.loadGradeSchema(this.scope.column()).then((e=>{this.gradeSchema=e})),this.scoreProviderHelperService=O}showAttemptSelector(){return this.isGradingBarAttemptNavigationEnabled&&this.ultraState.current.name&&this.ultraState.current.name.includes(o.x.SUBMISSION_GRADING)}setAttempts(){this.attempts=this.scope.row.group?this.scope.row.grade.groupAttempts:this.scope.row.grade.attempts}reloadAttempts(){return this.attempts.$refresh({expand:"toolAttemptDetail,viewUrl"}).$asPromise()}setAttemptSelectionOptions(){this.attemptOptions=[...this.attempts].map(((e,t)=>{var i;return{value:e.id,label:this.getLabelForAttempt(t+1),submissionDate:this.getSubmissionDate(e),submissionSize:this.getSubmissionSize(e),isSubmissionLate:this.isSubmittedLate(e),isReadyToPost:!!e.readyToPost,postedDate:this.getPostedDate(e),grade:e.score,displayGrade:null===(i=e.displayGrade)||void 0===i?void 0:i.grade,attemptStatus:e.status}}))}setOrReloadAttemptsAndSetSelectionOptions(){return(this.attempts?this.reloadAttempts():this.$q.resolve(this.setAttempts())).then(this.setAttemptSelectionOptions.bind(this))}goToSelectedAttempt(e){var t,i,a;const n={...this.ultraState.nextParams,columnId:null===(t=this.scope.column())||void 0===t?void 0:t.id,courseId:null===(i=this.scope.column())||void 0===i?void 0:i.courseId,gradeId:this.scope.row.grade.id,groupId:null===(a=this.scope.row.group)||void 0===a?void 0:a.id,attemptId:e,groupAttemptId:e,isGradingBarAttemptNavigationEnabled:!0};this.scoreProviderHelperService.gradingWithFeedbackStateRef(this.scope.column().scoreProviderHandle,n,q.a.GoToState)}setTemplate(){const e=this.scope.isPrivileged()?J:Z;oe(this.element,this.$compile(e)(this.scope))}setLocalizedLateness(){this.isSubmittedLate()&&(this.localizedLateness=this.localize.formatDurationBetweenSync(this.scope.column().dueDate,this.scope.attempt.attemptDate,this.scope))}showCommentIcon(){return this._showCommentIconForFeedbackPanel()}canAddComment(){return this.canEnterGrades||this.canEnterFeedback}getLocalizedSubmissionTotalSize(e){var t,i;if(null==(null===(t=e.attemptReceipt)||void 0===t?void 0:t.submissionTotalSize))return"-";return this.fileUtil.getLocalizedSize(null===(i=null==e?void 0:e.attemptReceipt)||void 0===i?void 0:i.submissionTotalSize,this.localize.getLocale(this.scope))}getAttemptReceiptIdToDisplay(){var e,t,i;return null!==(i=null===(t=null===(e=this.scope.attempt)||void 0===e?void 0:e.attemptReceipt)||void 0===t?void 0:t.receiptId)&&void 0!==i?i:"-"}getCommentIconType(){let e;return e=this.hasComment()||this.hasNonPrivilegedGroupIndividualFeedback()?"view":this.canAddComment()?"add":"empty",e}_showCommentIconForFeedbackPanel(){var e,t;const i=!s.isDefined(this.scope.showComment)||this.scope.showComment(),a=this.isPrivileged()&&(this.entitlementService.isEntitled(I.q.AllGrading)||(null===(e=this.peerReviewContentObject)||void 0===e?void 0:e.canPeerViewAttempt(this.scope.column(),this.scope.attempt))||this.scope.attempt.isGraded()&&(this.entitlementService.isEntitled(I.q.ViewGrades)||this.entitlementService.isEntitled(I.q.EnterFeedback))),n=!this.isPrivileged()&&(k.a.studentCanViewAttemptGradeAndFeedback(this.scope.attempt,this.scope.gradeDetail)||!!this.scope.hasOverallGrade||!!(null===(t=this.peerReviewContentObject)||void 0===t?void 0:t.canPeerViewAttempt(this.scope.column(),this.scope.attempt)));return i&&(a||n)}hasComment(){return k.a.attemptHasFeedback(this.scope.attempt)}hasNonPrivilegedGroupIndividualFeedback(){if(!this.isPrivileged()){const e=this.scope.attempt.attempts;return e&&e.length>0&&!!n.get(e[0].getGroupIndividualFeedbackToUser(),"rawText")}return!1}saveComment(e){return this.scope.attempt.feedbackToUser||(this.scope.attempt.feedbackToUser={rawText:""}),this.scope.attempt.feedbackToUser.rawText=e.rawText,this.scope.attempt.withParams({expand:"toolAttemptDetail"}).$patch().$asPromise().then((e=>e.feedbackToUser))}deleteAttempt(){this.deletingAttempt=!0,this.scope.attempt.$destroy().$then((()=>{this.deletingAttempt=!1,this.scope.onDelete&&this.scope.onDelete(),this.isGradingBarAttemptNavigationEnabled&&this.setAttemptSelectionOptions()}))}tryAddAccomodationsIconForOverflowMenu(e){const t=this.scope.row&&this.scope.row.Column;t&&k.a.canViewAssessmentException(t.isScorm(),k.a.isExternalSubmissionsAssessment(t.ui.content),this.entitlementService.isEntitled(L.a.ViewException),t.anonymousGrading)&&e.unshift({icon:"draw",labelKey:"components.directives.grade.grading-bar.menu.exceptions",onClick:this.openEditPerAssessmentPanel.bind(this),uniqueId:"edit-per-assessment"})}tryAddDrawOrVisibleIconForOverflowMenu(e){if(this.entitlementService.isEntitled(I.q.ViewGrades)&&!this.scope.disableFeedbackButtons){let t,i;this.entitlementService.isEntitled(I.q.EnterFeedback)||this.entitlementService.isEntitled(I.q.AllGrading)?(t="draw",i="components.directives.grade.grading-bar.menu.edit-comment"):(t="visible",i="components.directives.grade.grading-bar.menu.view-comment"),e.push({icon:t,labelKey:i,onClick:this.openFeedbackPanel.bind(this)})}}tryAddTrashIconForOverflowMenu(e){this.entitlementService.isEntitled(I.q.AllGrading)&&e.push({icon:"trash",labelKey:"global.delete",disable:this.deleteAttemptProcessing.bind(this),onClick:this.deleteAttempt.bind(this),confirmationOptions:w.a("x-bb-delete-attempt")})}getOverflowMenuItems(){const e=[];return this.isPrivileged()?(this.tryAddAccomodationsIconForOverflowMenu(e),this.tryAddDrawOrVisibleIconForOverflowMenu(e),this.tryAddTrashIconForOverflowMenu(e),e):e}deleteAttemptProcessing(){return this.deletingAttempt}openOriginalitySection(){return this.windowSize.isLargeBreakpoint()?this.originalityService.openOriginalityReport=!0:this.ultraState.goPeekState("originality-report")}openFeedbackPanel(e,t){const i=this.scope.commentPeekSref&&this.scope.commentPeekSref();if(i)return void this.ultraState.goPeekState(i.name,i.args);const a={attemptId:this.scope.attempt.id};if(e&&Object.assign(a,{userId:e}),t){this.ultraState.search("attemptId",a.attemptId),this.ultraState.search("userId",a.userId),this.scope.$broadcast(ne);const e={tabKey:W.c.Individual};this.$rootScope.$broadcast(P.FEEDBACK_PARAMS_UPDATED,e);const t=s.element("bb-feedback-authoring div.bb-editor");t.length>0&&t.first().focus()}else this.ultraState.goPeekState("assessment-submission-feedback",a)}openEditPerAssessmentPanel(){const e={columnId:this.scope.column().id};let t;this.scope.user()?(e.userId=this.scope.user().id,e.membershipId=this.scope.row.membership.id,t="per-assessment-settings"):this.scope.row&&this.scope.row.group&&(e.groupId=this.scope.row.group.id,t="per-assessment-group-settings"),this.ultraState.goPeekState(t,e)}fetchStudentDueDateExceptions(){var e;if(this.scope.isReconcile&&this.scope.column().id&&this.scope.column().courseId&&(null===(e=this.scope.user())||void 0===e?void 0:e.id))this.dueDateException=this.gradableItemUserOptionService.getGradableItemUserOptionByUserId(this.scope.column().id,this.scope.column().courseId,this.scope.user().id);else{const e=this.scope.user()&&this.scope.row&&!this.scope.column().isAnonymousGrading()?this.scope.row.membership.id:this.currentMembership.courseMembership.id;this.dueDateException=this.gradableItemUserOptionService.getGradableItemUserOptionByMembershipId(this.scope.column().id,e)}this.studentHasDueDateException=!!this.dueDateException,this.studentHasDueDateException&&(this.dueDateExceptionUnlimited=this.dueDateException.dueDateExceptionType===K.qb.Unlimited)}isSubmittedLate(e=this.scope.attempt){return(!this.scope.hasDueDateAccommodation||!this.scope.hasDueDateAccommodation())&&(this.studentHasDueDateException?!this.dueDateExceptionUnlimited&&(e&&h(e.attemptDate).isAfter(this.dueDateException.effectiveDueDate)):e&&h(e.attemptDate).isAfter(this.scope.column().dueDate))}isExempted(e){var t;return!(!this.gradebookGrades||!(null===(t=this.gradebookGrades.find((({id:t})=>t===e)))||void 0===t?void 0:t.isExempt))}isShowExtraTime(){return!!this.toolAttemptDetailItemEx&&this.toolAttemptDetailItemEx.needAttention()}isCompleted(){return!!this.toolAttemptDetailItemEx&&this.toolAttemptDetailItemEx.isCompleted()}getExceedTime(){return this.localize.translateSync({locale:this.localize.getLocale(this.scope),key:"components.directives.grade.grading-bar.exceed-time.plural",params:{exceedTime:this.toolAttemptDetailItemEx?this.toolAttemptDetailItemEx.getExceedTime():0}})}getQuestionsAnsweredAfterSoftTimeLimit(){return this.toolAttemptDetailItemEx?this.toolAttemptDetailItemEx.getQuestionsAnsweredAfterSoftTimeLimit():[]}isPrivileged(){return this.scope.isPrivileged&&this.scope.isPrivileged()||!1}canGrade(){return this.scope.attempt&&this.scope.attempt.isGradable(this.scope.column().scoreProviderHandle)?this.canEnterGrades:this.canOverrideGrades}showOverflowMenu(){return(!s.isDefined(this.scope.showOverflowMenu)||this.scope.showOverflowMenu())&&this.getOverflowMenuItems().length>0}goToPeekState(){this.hasPeekState()&&this.ultraState.goPeekState(this.scope.peekSref().name,this.scope.peekSref().args)}hasPeekState(){return null!=this.scope.peekSref&&null!=this.scope.peekSref()&&!!this.scope.peekSref().name}getLabelForAttempt(e=this.scope.attemptIndex){return e?this.localize.translateSync({locale:this.localize.getLocale(this.scope),key:"components.directives.grade.grading-bar.submission-x",params:{index:e},noWrap:!0}):this.localize.translateSync({locale:this.localize.getLocale(this.scope),key:"components.directives.grade.grading-bar.submission"})}get label(){return this.$sce.trustAsHtml(this.getLabelForAttempt())}getPostedDate(e){const t=this.localize.getLocale(this.scope);if(e.isDisplayablePostedGrade())return e.attemptLastGradedDate?this.localize.translateSync({locale:t,key:"components.directives.grade.grading-bar.posted-without-timezone",params:{date:e.attemptLastGradedDate}}):this.localize.translateSync({locale:t,key:"components.directives.grade.grading-bar.posted-no-date"})}getSubmissionDate(e){const t=this.localize.getLocale(this.scope);if(!this.isSubmittedLate(e)&&e.isPrePostGrade())return this.localize.translateSync({locale:t,key:"components.directives.grade.grading-bar.submit-date-without-timezone",params:{date:e.attemptDate}});if(this.isSubmittedLate(e)&&e.isPrePostGrade()){if(this.isGradingBarAttemptNavigationEnabled)return this.localize.translateSync({locale:t,key:"components.directives.grade.grading-bar.submit-late-date-without-timezone",params:{date:e.attemptDate}});const i=this.localize.formatDurationBetweenSync(this.scope.column().dueDate,e.attemptDate,this.scope);return this.localize.translateSync({locale:t,key:"components.directives.grade.grading-bar.submit-lateness",params:{lateness:i}})}return e.isDisplayablePostedGrade()?this.isSubmittedLate(e)?this.localize.translateSync({locale:t,key:"components.directives.grade.grading-bar.submit-late-date-without-timezone",params:{date:e.attemptDate}}):this.localize.translateSync({locale:t,key:"components.directives.grade.grading-bar.submit-date-without-timezone",params:{date:e.attemptDate}}):""}getSubmissionSize(e){return this.localize.translateSync({locale:this.localize.getLocale(this.scope),key:"components.directives.grade.grading-bar.submission-total-size",params:{size:this.getLocalizedSubmissionTotalSize(e)}})}get inputGradeAriaLabel(){var e;return!!(null===(e=this.scope.row)||void 0===e?void 0:e.group)?this.localize.translateSync({key:"components.directives.grade.grading-bar.attempt-input-aria-label-group",params:{group:this.scope.row.group.title,attempt_index:this.scope.attemptIndex,grade_point:this.scope.attempt.score,total_point:this.scope.column&&this.scope.column()&&this.scope.column().possible},locale:this.localize.getLocale(this.scope),noWrap:!0}):this.localize.translateSync({key:"components.directives.grade.grading-bar.attempt-input-aria-label",params:{student:this.scope.user(),attempt_index:this.scope.attemptIndex,grade_point:this.scope.attempt.score,total_point:this.scope.column&&this.scope.column()&&this.scope.column().possible},locale:this.localize.getLocale(this.scope),noWrap:!0})}subscribeToReduxChanges(){const e=this.$ngRedux.connect((e=>({gradebookGrades:r.gc.gradebookGrade.getGradebookGradesByColumnId(e,this.scope.column().id)})),null)(this);this.scope.$on("$destroy",e)}};ce=Object(a.a)([Object(a.c)(0,Object(R.b)("$q")),Object(a.c)(1,Object(R.b)("$rootScope")),Object(a.c)(2,Object(R.b)("scope")),Object(a.c)(3,Object(R.b)("element")),Object(a.c)(4,Object(R.b)("$compile")),Object(a.c)(5,Object(R.b)("$sce")),Object(a.c)(6,Object(R.b)(u.serviceName)),Object(a.c)(7,Object(R.b)(O.d)),Object(a.c)(8,Object(R.b)(G.b)),Object(a.c)(9,Object(R.b)(v.b)),Object(a.c)(10,Object(R.b)(U.b)),Object(a.c)(11,Object(R.b)(T.b)),Object(a.c)(12,Object(R.b)(F.b)),Object(a.c)(13,Object(R.b)("$ngRedux")),Object(a.c)(14,Object(R.b)(j.b)),Object(a.c)(15,Object(R.b)(y.d)),Object(a.c)(16,Object(R.b)(H.b)),Object(a.c)(17,Object(R.b)(M.b)),Object(a.c)(18,Object(R.b)(q.c))],ce);let le=class extends ce{constructor(e,t,i,a,n,s,r,o,d,c,l,p,g,m,u,b,h,v,w,f=!1){var O;super(e,t,i,a,n,s,r,o,d,c,l,p,g,m,u,b,h,v,w,f),this.$q=e,this.$rootScope=t,this.scope=i,this.element=a,this.$compile=n,this.$sce=s,this.localize=r,this.ultraState=o,this.windowSize=d,this.originalityService=c,this.entitlementService=l,this.gradebookPermission=p,this.peerReviewService=g,this.$ngRedux=m,this.gradableItemUserOptionService=u,this.currentMembership=b,this.isDelegatedHandler=f,this.updateIndividualFeedbackStatus=e=>{var t;const i=this.dropDownList.getIndividualAttempt(e.userId);if(i.feedbackToUser=e.feedbackToUser,i.overrideStatus=e.overrideStatus,null===(t=this.dropDownList)||void 0===t?void 0:t.group){const e=this.dropDownList.gradeGroupAttempts.find((e=>e.userId===i.userId));e&&(e.feedbackToUser=i.feedbackToUser,e.overrideStatus=i.overrideStatus)}},(null===(O=this.scope.row)||void 0===O?void 0:O.group)&&(this.dropDownList=new de(this.scope.attempt,this.scope.row.group,this.scope.userList,!1,!1,this.scope.getUserCourseAvailabilities(),this.canEnterGrades,this.canEnterFeedback,(()=>this._showCommentIconForFeedbackPanel()),((e,t)=>this.openFeedbackPanel(e,t))),this.scope.$watch((()=>this.scope.row.group),(()=>{this.dropDownList.slideChanged(this.scope.userList,this.scope.attempt),this.scope.selectedUser=this.scope.userList.find((e=>e.id===this.scope.attempt.submittedBy))})),Object($.e)(this.scope,((e,t)=>this.updateIndividualFeedbackStatus(t))),this.scope.$on(ne,(()=>{this.dropDownList.toggleUserList()})))}getOverflowMenuItems(){const e=[];return this.tryAddTrashIconForOverflowMenu(e),e}individualFeedbackAriaLabel(e){return this.localize.translateSync({key:"components.directives.grade.grading-bar.instructor-comments.aria-label.individual-feedback-button",params:{student:this.scope.userList[e]},locale:this.localize.getLocale(this.scope),noWrap:!0})}};le=Object(a.a)([Object(a.c)(0,Object(R.b)("$q")),Object(a.c)(1,Object(R.b)("$rootScope")),Object(a.c)(2,Object(R.b)("scope")),Object(a.c)(3,Object(R.b)("element")),Object(a.c)(4,Object(R.b)("$compile")),Object(a.c)(5,Object(R.b)("$sce")),Object(a.c)(6,Object(R.b)(u.serviceName)),Object(a.c)(7,Object(R.b)(O.d)),Object(a.c)(8,Object(R.b)(G.b)),Object(a.c)(9,Object(R.b)(v.b)),Object(a.c)(10,Object(R.b)(U.b)),Object(a.c)(11,Object(R.b)(T.b)),Object(a.c)(12,Object(R.b)(F.b)),Object(a.c)(13,Object(R.b)("$ngRedux")),Object(a.c)(14,Object(R.b)(j.b)),Object(a.c)(15,Object(R.b)(y.d)),Object(a.c)(16,Object(R.b)(H.b)),Object(a.c)(17,Object(R.b)(M.b)),Object(a.c)(18,Object(R.b)(q.c))],le);let pe=class{constructor(e,t,i,a,n,s,o,d,c,l,p,g,m,u=!1){if(this.scope=e,this.element=t,this.$compile=i,this.grade=a,this.entitlementService=n,this.gradebookService=s,this.GradeModel=o,this.batchApi=d,this.ultraState=c,this.$q=l,this.localize=p,this.gradableItemUserOptionService=g,this.isDelegatedHandler=u,this.isGradingBarAttemptNavigationEnabled=!1,this.canViewGrades=this.entitlementService.isEntitled(I.q.ViewGrades),this.scope.isPrivileged()&&this.scope.$on("bb-grade-input-save",((e,t)=>{if(t instanceof this.GradeModel&&(null==t?void 0:t.id)===this.scope.gradeDetail.id){const e=t;e.attempts=this.scope.gradeDetail.attempts,e.ui.attempt=this.scope.gradeDetail.ui.attempt,e.permissions=this.scope.gradeDetail.permissions,this.scope.gradeDetail=e}})),!u){this.scope.gradingBar=this;const e=this.scope.isPrivileged()?Q:X;oe(this.element,this.$compile(e)(this.scope))}m.createWaiter(r.r.GradingBarAttemptNavigation).then((e=>{this.isGradingBarAttemptNavigationEnabled=e}))}showAttemptSelector(){return this.isGradingBarAttemptNavigationEnabled&&this.ultraState.current.name&&this.ultraState.current.name.includes(o.x.SUBMISSION_GRADING)}getLocalizedTextByKey(e){return this.localize.translateSync({locale:this.localize.getLocale(this.scope),key:e,noWrap:!0})}saveComment(e){return{}}showPostButton(){return this.scope.gradeDetail.isReadyToPost()}postGrade(){if(this.scope.row&&this.scope.row.group)this.scope.column().postReadyGroupAttempts({groupAssociationId:this.scope.gradeDetail.groupAttempts[0].groupAssociationId}).then((()=>{this.scope.$root.$broadcast("grade-post-ready-attempts",this.scope.gradeDetail,this.scope.row.group.id),this.scope.onUpdate&&this.scope.onUpdate()}));else{const e=this.scope.gradeDetail.ui.attempt&&this.scope.gradeDetail.ui.attempt.id;this.scope.gradeDetail.postReadyGrades().then((()=>{this.grade.loadGrade({gradeQueryParams:{includeUnpostedGrade:!0},courseId:this.scope.column().courseId,column:this.scope.column(),userId:this.scope.user().id,attemptQueryParams:{attemptId:e,expand:"toolAttemptDetail"}},s.isDefined(e)).then((e=>{e.attempts=this.scope.gradeDetail.attempts,this.scope.gradeDetail=e,this.scope.onUpdate&&this.scope.onUpdate({newGrade:this.scope.gradeDetail}),this.scope.$root.$broadcast("grade-post-ready-attempts",this.scope.gradeDetail)}))}))}}undoOverride(){this.scope.gradeDetail.manualGrade="-",this.scope.gradeDetail.$patch(["manualGrade"]).$then((e=>{this.scope.$emit("bb-grade-input-save",e,e.columnId),this.scope.$emit(f.b),this.scope.$root.$broadcast("OVERRIDE-UNDONE",e)}))}canGrade(){return this.canViewGrades&&this.canOverrideGrades()}canEnterFeedback(){return this.entitlementService.isEntitled(I.q.EnterFeedback)}canEnterGrades(){return this.entitlementService.isEntitled(I.q.AllGrading)}canOverrideGrades(){return this.entitlementService.isEntitled(I.q.AllGrading)}canPostGrades(){return this.gradebookService.canPostGrades()}tryAddPostIconForOverflowMenu(e){!this.scope.column().anonymousGrading&&this.canPostGrades()&&e.push({icon:"post",labelKey:"components.directives.grade.grading-bar.menu.post",show:this.showPostButton.bind(this),onClick:this.postGrade.bind(this),confirmationOptions:w.a("grading-bar-post-grade")})}getOverflowMenuItems(){const e=[];return this.tryAddPostIconForOverflowMenu(e),e}getAggregationModelLabelKey(){var e;const t=Object(E.parseAttemptAggregationModel)(null===(e=this.scope.column())||void 0===e?void 0:e.aggregationModel);return t?Object(E.getAttemptAggregationModelLabelKey)(t):null}showOverrideIndicator(){return this.scope.showOverrideIndicator&&this.scope.showOverrideIndicator()&&this.scope.gradeDetail.isPosted()&&this.scope.gradeDetail.isOverrideGrade()}shouldShowFinalGradeInput(){return this.scope.gradeDetail&&this.scope.column().canSeeFinalGrade(this.scope.user())}shouldShowUndoOverride(){return this.scope.gradeDetail&&!this.scope.gradeDetail.isExempt&&(this.scope.column().delegatedGrading?this.scope.gradeDetail.isOverrideGrade()&&this.scope.column().isUserReconciler(this.scope.user().id):this.scope.gradeDetail.isOverrideGrade())}};pe=Object(a.a)([Object(a.c)(0,Object(R.b)("scope")),Object(a.c)(1,Object(R.b)("element")),Object(a.c)(2,Object(R.b)("$compile")),Object(a.c)(3,Object(R.b)(m.n)),Object(a.c)(4,Object(R.b)(U.b)),Object(a.c)(5,Object(R.b)(T.b)),Object(a.c)(6,Object(R.b)(b.D.serviceName)),Object(a.c)(7,Object(R.b)(d.b)),Object(a.c)(8,Object(R.b)(O.d)),Object(a.c)(9,Object(R.b)("$q")),Object(a.c)(10,Object(R.b)(u.serviceName)),Object(a.c)(11,Object(R.b)(j.b)),Object(a.c)(12,Object(R.b)(H.b))],pe);let ge=class{constructor(e,t,i,a,n,s,r,o,d,c,l,p,g,m,u,b,h,v,w,f,O,x,S,D,B){this.$rootScope=e,this.scope=t,this.element=i,this.$compile=a,this.$sce=n,this.$q=s,this.$ngRedux=r,this.grade=o,this.entitlementService=d,this.gradebookPermission=c,this.localize=l,this.batchApi=p,this.ultraState=g,this.windowSize=m,this.originalityReport=u,this.peerReviewService=b,this.modal=h,this.GradeModel=v,this.delegatedAttemptAdapter=w,this.UserModel=f,this.gradableItemUserOptionService=O,this.currentMembership=x,this.scope.gradingBar=this,this.attemptGradingHandler=new ce(s,e,t,i,a,n,l,g,m,u,d,c,b,r,O,x,S,D,B,!0),this.aggregateGradingHandler=new pe(t,i,a,o,d,c,v,p,g,s,l,O,S,!0);const G=this.scope.isPrivileged()?ie:te;this.attemptGradingHandler.peerReviewContentObjectPromise?this.attemptGradingHandler.peerReviewContentObjectPromise.finally((()=>oe(this.element,this.$compile(G)(this.scope)))):oe(this.element,this.$compile(G)(this.scope)),this.setLocalizedLateness()}getClearConfirmationCallout(){return this.scope.hasRubricClearConfirmationCallout}isPeerGrading(){var e,t,i;return null!==(i=null===(t=null===(e=this.attemptGradingHandler)||void 0===e?void 0:e.peerReviewContentObject)||void 0===t?void 0:t.peerGrading)&&void 0!==i&&i}showSubmissionInfo(){return!this.isPeerGrading()||this.scope.isPrivileged()&&this.entitlementService.isEntitled(I.q.ModifyGradebook)}getLocalizedSubmissionTotalSize(e){return this.attemptGradingHandler.getLocalizedSubmissionTotalSize(e)}getAttemptReceiptIdToDisplay(){return this.attemptGradingHandler.getAttemptReceiptIdToDisplay()}get submissionListRow(){return this.scope.row}get numOfPeerReviewsCompleted(){var e,t;return this.submissionListRow?this.submissionListRow.numOfPeerReviewsCompleted:null!==(t=null===(e=this.attemptGradingHandler.peerReviewContentObject)||void 0===e?void 0:e.completedPeerReviews)&&void 0!==t?t:0}get numOfPeerReviewsCompletedLate(){var e,t;return this.submissionListRow?this.submissionListRow.numOfPeerReviewsCompletedLate:null!==(t=null===(e=this.attemptGradingHandler.peerReviewContentObject)||void 0===e?void 0:e.numberOfLatePeerReviews)&&void 0!==t?t:0}get numOfPeerReviewsStarted(){var e,t;return this.submissionListRow?this.submissionListRow.numOfPeerReviewsStarted:null!==(t=null===(e=this.attemptGradingHandler.peerReviewContentObject)||void 0===e?void 0:e.numberOfStartedPeerReviews)&&void 0!==t?t:0}get hasDueDateException(){return this.submissionListRow?this.submissionListRow.hasDueDateException:this.scope.hasDueDateAccommodation&&this.scope.hasDueDateAccommodation()}canSeeGradePillForStudentReviewer(){return!this.isPeerGrading()||this.entitlementService.isEntitled(I.q.ModifyGradebook)}hasGroupIndividualComment(e){return e&&e.overrideStatus===K.j.FeedbackOverride&&!!n.get(e,"feedbackToUser.rawText")}setLocalizedLateness(){this.isSubmittedLate()&&(this.localizedLateness=this.localize.formatDurationBetweenSync(this.scope.column().dueDate,this.scope.attempt.attemptDate,this.scope))}saveComment(e){return this.attemptGradingHandler.saveComment(e)}isSubmittedLate(){return this.attemptGradingHandler.isSubmittedLate()}deleteAttempt(){this.attemptGradingHandler.deleteAttempt()}postGrade(){this.aggregateGradingHandler.postGrade()}openFeedbackPanel(e,t){this.scope.onFeedbackIconClick?this.scope.onFeedbackIconClick():this.attemptGradingHandler.openFeedbackPanel(e,t)}hasComment(){return this.attemptGradingHandler.hasComment()}isOverride(){if(this.isAnonymousGradingAndUsesRubrics())return this.grade.isRubricGradeOverridden(this.scope.gradeDetail,this.scope.attempt,this.scope.column());const e=this.scope.gradeDetail&&this.scope.gradeDetail.isOverrideGrade();return e||!!(this.scope.row&&this.scope.row.group&&this.scope.row.group.memberships)&&this.scope.row.group.memberships.some((e=>!(!e.ui||!e.ui.gradeDetail)&&e.ui.gradeDetail.isOverrideGrade()))}shouldShowOverrideIndicator(){return this.isOverride()&&!this.scope.hideGrade()&&!this.scope.gradeDetail.isExempt}undoOverride(){if(this.isAnonymousGradingAndUsesRubrics()){const e=this.scope.attempt.rubricEvaluation;return this.scope.attempt.score=null==e?void 0:e.totalScore,void this.scope.$broadcast(x.a,null==e?void 0:e.totalScore)}this.scope.row&&this.scope.row.group?this.batchApi.performBatch((()=>this.$q.all(this.scope.row.group.memberships.map((e=>{const t=e.ui.gradeDetail;return t.manualGrade="-",t.withParams({clearCommentsIfRevertOverrides:!1}).$patch(["manualGrade"]).$asPromise()}))).then((e=>{this.scope.$emit("bb-grade-input-save",e,this.scope.column().id),this.scope.$emit(f.b),this.scope.$root.$broadcast("OVERRIDE-UNDONE",e[0])})))):this.aggregateGradingHandler.undoOverride()}canGrade(){return this.scope.gradeDetail.user&&this.scope.column().anonymousGrading||this.scope.attempt&&this.scope.attempt.isGradable(this.scope.column().scoreProviderHandle)?this.attemptGradingHandler.canGrade():this.aggregateGradingHandler.canGrade()}isAnonymousGradingAndUsesRubrics(){const e=this.scope.column&&this.scope.column();return e.anonymousGrading&&e.hasRubricAssociation()}openDeletePeerSubmissionWarning(){const e=this.scope.attempt;this.delegatedAttemptAdapter.loadDelegatedGradesOnAttempt({courseId:this.scope.column().courseId,columnId:this.scope.column().id,gradeId:e.gradeId,attemptId:e.id}).then((e=>{var t,i;const a=e.filter((e=>e.grader)),n=this.scope.$new();n.translateOpts={title:{key:"components.directives.grade.grading-bar.modal.title"}};const s=a.length>0,r=(null===(t=this.attemptGradingHandler.peerReviewContentObject)||void 0===t?void 0:t.isInPeerReviewWindow)||(null===(i=this.attemptGradingHandler.peerReviewContentObject)||void 0===i?void 0:i.isAfterPeerReviewWindow);n.descriptionKey=s&&r?"components.directives.grade.grading-bar.modal.description":"components.directives.confirmation-needed.instructions-x-bb-delete-attempt",n.deleteOnClick=e=>{this.deleteAttempt(),e()};const o=a.filter((e=>!!e)),d=this.UserModel.$collection();o.forEach((e=>{const t=this.UserModel.$buildRaw({...e});d.$add(t)})),n.graders=d;const c={scope:n,template:Y};this.modal.open(c)}))}tryAddTrashIconForOverflowMenu(e){this.entitlementService.isEntitled(I.q.AllGrading)&&this.isPeerGrading()?e.push({icon:"trash",labelKey:"global.delete",disable:this.attemptGradingHandler.deleteAttemptProcessing.bind(this),onClick:this.openDeletePeerSubmissionWarning.bind(this)}):this.attemptGradingHandler.tryAddTrashIconForOverflowMenu(e)}getOverflowMenuItems(){const e=this.aggregateGradingHandler.getOverflowMenuItems();return this.attemptGradingHandler.isPrivileged()?(this.attemptGradingHandler.tryAddAccomodationsIconForOverflowMenu(e),this.attemptGradingHandler.tryAddDrawOrVisibleIconForOverflowMenu(e),this.tryAddTrashIconForOverflowMenu(e),e):e}getLocalizedTextByKey(e){return this.localize.translateSync({locale:this.localize.getLocale(this.scope),key:e,noWrap:!0})}showOverflowMenu(){return(!this.isPeerGrading()||!this.scope.gradeDetail.user.isStudent())&&this.attemptGradingHandler.showOverflowMenu()}isShowExtraTime(){return this.attemptGradingHandler.isShowExtraTime()}isCompleted(){return this.attemptGradingHandler.isCompleted()}getExceedTime(){return this.attemptGradingHandler.getExceedTime()}getQuestionsAnsweredAfterSoftTimeLimit(){return this.attemptGradingHandler.getQuestionsAnsweredAfterSoftTimeLimit()}showCommentIcon(){return this.attemptGradingHandler.showCommentIcon()}getCommentIconType(){return this.attemptGradingHandler.getCommentIconType()}get showGradeDetailGradepill(){return!(!this.canGrade()||!this.scope.user())&&(!!this.isPeerGrading()||!this.scope.column().anonymousGrading&&!this.scope.column().delegatedGrading)}get isGradingBarAttemptNavigationEnabled(){return this.attemptGradingHandler.isGradingBarAttemptNavigationEnabled}};ge=Object(a.a)([Object(a.c)(0,Object(R.b)("$rootScope")),Object(a.c)(1,Object(R.b)("scope")),Object(a.c)(2,Object(R.b)("element")),Object(a.c)(3,Object(R.b)("$compile")),Object(a.c)(4,Object(R.b)("$sce")),Object(a.c)(5,Object(R.b)("$q")),Object(a.c)(6,Object(R.b)("$ngRedux")),Object(a.c)(7,Object(R.b)(m.n)),Object(a.c)(8,Object(R.b)(U.b)),Object(a.c)(9,Object(R.b)(T.b)),Object(a.c)(10,Object(R.b)(u.serviceName)),Object(a.c)(11,Object(R.b)(d.b)),Object(a.c)(12,Object(R.b)(O.d)),Object(a.c)(13,Object(R.b)(G.b)),Object(a.c)(14,Object(R.b)(v.b)),Object(a.c)(15,Object(R.b)(F.b)),Object(a.c)(16,Object(R.b)(N.b)),Object(a.c)(17,Object(R.b)(b.D.serviceName)),Object(a.c)(18,Object(R.b)(_.b)),Object(a.c)(19,Object(R.b)(b.Jb.serviceName)),Object(a.c)(20,Object(R.b)(j.b)),Object(a.c)(21,Object(R.b)(y.d)),Object(a.c)(22,Object(R.b)(H.b)),Object(a.c)(23,Object(R.b)(M.b)),Object(a.c)(24,Object(R.b)(q.c))],ge);let me=class extends ge{constructor(e,t,i,a,n,s,r,o,d,c,l,p,g,m,u,b,h,v,w,f,O,x,S,D,B){var G;super(e,t,i,a,n,s,r,o,d,c,l,p,g,m,u,b,h,v,w,f,O,x,S,D,B),this.$rootScope=e,this.scope=t,this.element=i,this.$compile=a,this.$sce=n,this.$q=s,this.$ngRedux=r,this.grade=o,this.entitlementService=d,this.gradebookPermission=c,this.localize=l,this.batchApi=p,this.ultraState=g,this.windowSize=m,this.originalityReport=u,this.peerReviewService=b,this.modal=h,this.GradeModel=v,this.delegatedAttemptAdapter=w,this.UserModel=f,this.gradableItemUserOptionService=O,this.currentMembership=x,this.updateIndividualFeedbackStatus=e=>{var t;const i=this.dropDownList.getIndividualAttempt(e.userId);if(i.feedbackToUser=e.feedbackToUser,i.overrideStatus=e.overrideStatus,null===(t=this.dropDownList)||void 0===t?void 0:t.group){const e=this.dropDownList.gradeGroupAttempts.find((e=>e.userId===i.userId));e&&(e.feedbackToUser=i.feedbackToUser,e.overrideStatus=i.overrideStatus)}},(null===(G=this.scope.row)||void 0===G?void 0:G.group)&&(this.dropDownList=new de(this.scope.attempt,this.scope.row.group,this.scope.userList,!1,!1,this.scope.getUserCourseAvailabilities(),this.attemptGradingHandler.canEnterGrades,!1,(()=>this.showCommentIcon()),((e,t)=>this.openFeedbackPanel(e,t))),this.scope.$watch((()=>this.scope.row.group),(()=>{this.dropDownList.slideChanged(this.scope.userList,this.scope.attempt),this.scope.selectedUser=this.scope.userList.find((e=>e.id===this.scope.attempt.submittedBy))})),Object($.e)(this.scope,((e,t)=>this.updateIndividualFeedbackStatus(t))),this.scope.$on(ne,(()=>{this.dropDownList.toggleUserList()})))}};me=Object(a.a)([Object(a.c)(0,Object(R.b)("$rootScope")),Object(a.c)(1,Object(R.b)("scope")),Object(a.c)(2,Object(R.b)("element")),Object(a.c)(3,Object(R.b)("$compile")),Object(a.c)(4,Object(R.b)("$sce")),Object(a.c)(5,Object(R.b)("$q")),Object(a.c)(6,Object(R.b)("$ngRedux")),Object(a.c)(7,Object(R.b)(m.n)),Object(a.c)(8,Object(R.b)(U.b)),Object(a.c)(9,Object(R.b)(T.b)),Object(a.c)(10,Object(R.b)(u.serviceName)),Object(a.c)(11,Object(R.b)(d.b)),Object(a.c)(12,Object(R.b)(O.d)),Object(a.c)(13,Object(R.b)(G.b)),Object(a.c)(14,Object(R.b)(v.b)),Object(a.c)(15,Object(R.b)(F.b)),Object(a.c)(16,Object(R.b)(N.b)),Object(a.c)(17,Object(R.b)(b.D.serviceName)),Object(a.c)(18,Object(R.b)(_.b)),Object(a.c)(19,Object(R.b)(b.Jb.serviceName)),Object(a.c)(20,Object(R.b)(j.b)),Object(a.c)(21,Object(R.b)(y.d)),Object(a.c)(22,Object(R.b)(H.b)),Object(a.c)(23,Object(R.b)(M.b)),Object(a.c)(24,Object(R.b)(q.c))],me);class ue extends ce{setTemplate(){if(!this.scope.attemptIndex)throw new Error("`attemptIndex` is required for grading bar when in reconciliation mode.");oe(this.element,this.$compile(ee)(this.scope))}getGradeInputAriaLabel(){return this.localize.translateSync({key:"components.directives.grade.grading-bar.reconcile-grade-attempt-input-aria-label",params:{student:this.scope.user(),attempt_index:this.scope.attemptIndex},locale:this.localize.getLocale(this.scope),noWrap:!0})}}class be extends pe{shouldShowUndoOverride(){var e;return null===(e=this.scope.gradeDetail.displayGrade)||void 0===e?void 0:e.isOverride}undoOverride(){var e;const t=null===(e=this.scope.row.group)||void 0===e?void 0:e.memberships;t&&this.batchApi.performBatch((()=>this.$q.all(t.map((e=>{const t=e.ui.gradeDetail;return t.manualGrade="-",t.withParams({clearCommentsIfRevertOverrides:!1}).$patch(["manualGrade"]).$asPromise()}))).then((e=>{this.scope.$emit("bb-grade-input-save",e,this.scope.column().id),this.scope.$emit(f.b),this.scope.$root.$broadcast("OVERRIDE-UNDONE",e[0])})))).then((()=>{this.scope.$emit("group-grade-save"),this.scope.$emit(f.b),this.scope.$root.$broadcast("OVERRIDE-UNDONE",this.scope.gradeDetail)}))}postGrade(){this.scope.row&&this.scope.row.group&&this.scope.column().postReadyGroupAttempts({groupAssociationId:this.scope.gradeDetail.groupAssociationId}).then((()=>{this.scope.updateFinalGroupGradeAndAttempts?this.scope.$root.$broadcast("group-grade-and-attempts-reload"):(this.scope.$root.$broadcast("grade-post-ready-attempts",this.scope.gradeDetail,this.scope.row.group.id),this.scope.onUpdate&&this.scope.onUpdate())}))}}let he=class{constructor(e,t){this.$compile=e,this.$injector=t,this.restrict="E",this.scope={isPrivileged:"&",isReconcile:"&",saveAsOverride:"&",attempt:"=",gradeDetail:"=",row:"=",column:"&",hasDueDateAccommodation:"&",user:"&",attemptIndex:"@",attemptStatus:"@",peekSref:"&",showOverrideIndicator:"&",hideRubricIcon:"=?",onUpdate:"&?",onDelete:"&?",hideGrade:"&?",disableFeedbackInput:"<?",disableFeedbackButtons:"<?",enableEditableInputMode:"&?",isReadonly:"&?",onFeedbackIconClick:"&?",showOverflowMenu:"&?",showComment:"&?",commentPeekSref:"&?",disableRubricAction:"&?",selectedUser:"=?",selectedText:"@?",userList:"=?",isExceptionAttempt:"=?",getUserCourseAvailabilities:"&?userCourseAvailabilities",hasOverallGrade:"<?",isGradeExempt:"<?",hasRubricClearConfirmationCallout:"<?",showGroupList:"<?",updateFinalGroupGradeAndAttempts:"<?"},this.link=(e,t,i)=>{if(t.append(this.$compile(ae)(e)),e.column())if(e.isReconcile())e.gradingBar=this.$injector.instantiate(ue,{scope:e,element:t,isDelegate:!1});else if(e.column().isMultipleAttempts()||e.isExceptionAttempt)if(!e.gradeDetail||e.attempt||e.column().isGroupContent())if(e.gradeDetail&&!e.attempt&&e.column().isGroupContent()&&(e.column().isMultipleAttempts()||e.isExceptionAttempt))e.gradingBar=this.$injector.instantiate(be,{scope:e,element:t});else if(!e.attempt||e.showGroupList||e.gradeDetail){if(!e.attempt||!e.showGroupList||e.gradeDetail)throw new Error("For multiple attempt assessment, gradeDetail or attempt has to be set, not both nor none");e.gradingBar=this.$injector.instantiate(le,{scope:e,element:t,attrs:i})}else e.gradingBar=this.$injector.instantiate(ce,{scope:e,element:t});else e.gradingBar=this.$injector.instantiate(pe,{scope:e,element:t});else e.gradingBar=this.$injector.instantiate(me,{scope:e,element:t,attrs:i})}}};he=Object(a.a)([Object(a.c)(0,Object(R.b)("$compile")),Object(a.c)(1,Object(R.b)("$injector"))],he),s.module(se,[A.a,c.a,l.a,p.a,g.a,u.moduleName,w.b,G.a,x.b,S.a,D.a,B.a,v.a,U.a,T.a,M.a,F.a,N.a,z.a,_.a,q.b,j.a,C.a]).directive("bbGradingBar",["$injector",e=>e.instantiate(he)])}).call(this,i("71td"))},Cs2n:function(e,t){e.exports='<div class="grading-bar"\n     bb-load-bundle="components/directives/grade/grading-bar">\n    \x3c!--Template will be appended here--\x3e\n</div>\n\n'},FwQ6:function(e,t){e.exports='<form name="{{::\'top_grading_bar\' + attempt.id}}" bb-first-time-container>\n  \x3c!-- TODO: LRN-194211 - Remove ng-class when the feature flag behind the property is removed. --\x3e\n  <div class="multiple-submissions-grading-bar attempt-grading-bar"\n       ng-class="{\'add-comment-expanded\': gradingBar.gradingCommentHandler.commentPanelOpen, \'isGradingBarAttemptNavigationEnabled\': gradingBar.showAttemptSelector()}"\n       bb-foundation-defer>\n    <div\n      class="attempt-grading-bar-inner"\n      bb-click-to-invoke-child="a.attempt-info-container"\n      ng-class="{\'attempt-status-message-visible\': attemptStatus}"\n      ng-switch="gradingBar.hasPeekState()">\n\n      <a  href="javascript:void(0);"\n          class="attempt-info-container"\n          ng-switch-when="true"\n          ng-click="gradingBar.goToPeekState()"\n          analytics-id="components.directives.grade.gradingBar.goToPeekState.link"\n      >\n        <i class="icon submission-type-icon" bb-content-item-icon content-column="::column()"></i>\n        <div class="attempt-info">\n          <span class="name ellipsis" ng-bind-html="::gradingBar.label"></span>\n          <span class="submission-details-wrap" ng-if="attempt">\n            \x3c!--submitted on time but not graded/posted--\x3e\n            <span class="details ellipsis submitted js-submitted-date" ng-if="!gradingBar.isSubmittedLate() && attempt.isPrePostGrade()" bb-translate translate-values="{date: attempt.attemptDate}">\n              components.directives.grade.grading-bar.submit-date-without-timezone\n            </span>\n            \x3c!--submitted late but not yet graded/posted--\x3e\n            <span ng-if="gradingBar.isSubmittedLate() && attempt.isPrePostGrade() && !gradingBar.isExempted(attempt.gradeId)" class="show-hide-on-hover">\n              <span class="details ellipsis submitted show-on-hover text-alert-ax js-submitted-late-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                components.directives.grade.grading-bar.submit-late-date-without-timezone\n              </span>\n              <span class="details ellipsis hide-on-hover text-alert-ax js-submitted-late-date" bb-translate translate-values="{lateness: gradingBar.localizedLateness}">\n                components.directives.grade.grading-bar.submit-lateness\n              </span>\n            </span>\n            \x3c!--attempt has been graded/posted--\x3e\n            <span ng-if="attempt.isDisplayablePostedGrade()" class="show-hide-on-hover">\n            \x3c!--submitted on time--\x3e\n              <span ng-if="gradingBar.isSubmittedLate() && !gradingBar.isExempted(attempt.gradeId)" class="details ellipsis submitted show-on-hover text-alert-ax js-submitted-late-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                components.directives.grade.grading-bar.submit-late-date-without-timezone\n              </span>\n              \x3c!--submitted late--\x3e\n              <span ng-if="!gradingBar.isSubmittedLate()" class="details ellipsis submitted show-on-hover js-submitted-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                components.directives.grade.grading-bar.submit-date-without-timezone\n              </span>\n              <span class="details ellipsis hide-on-hover posted js-posted-indicator" bb-translate translate-values="{date: attempt.attemptLastGradedDate || \'\'}">\n                components.directives.grade.grading-bar.posted-without-timezone\n              </span>\n            </span>\n          </span>\n          <span class="submission-total-size" bb-translate translate-values="{size: gradingBar.getLocalizedSubmissionTotalSize(attempt)}">\n            components.directives.grade.grading-bar.submission-total-size\n          </span>\n          <div class="attempt-receipt-info">\n            <span class="attempt-receipt-label" bb-translate>components.directives.grade.grading-bar.submission-receipt-number</span>\n            <span class="attempt-receipt-id ellipsis">{{ gradingBar.getAttemptReceiptIdToDisplay() }}</span>\n          </div>\n        </div>\n      </a>\n      \x3c!-- TODO: LRN-194211 - Remove ng-if when the feature flag behind the property is removed. --\x3e\n      <div ng-if="gradingBar.showAttemptSelector()" class="attempt-selection-container">\n        <bb-attempt-selection\n          attempt-id="attempt.id"\n          attempt-options="gradingBar.attemptOptions"\n          on-change="gradingBar.attemptSelectionOnChange"\n          points-possible="column().possible"\n          grade-schema="gradingBar.gradeSchema"\n          auto-focus="gradingBar.autoFocusAttemptSelector"\n        >\n        </bb-attempt-selection>\n      </div>\n      \x3c!-- TODO: LRN-194211 - Remove when the feature flag behind the property is removed. --\x3e\n      <i ng-switch-default ng-if="!gradingBar.showAttemptSelector()" class="icon submission-type-icon" bb-content-item-icon content-column="::column()"></i>\n      \x3c!-- TODO: LRN-194211 - Remove when the feature flag behind the property is removed. --\x3e\n      <div ng-switch-default ng-if="!gradingBar.showAttemptSelector()" class="attempt-info">\n        <span class="name ellipsis" ng-bind-html="gradingBar.label"></span>\n        <span class="submission-details-wrap" ng-if="attempt">\n          <span class="details-container">\n            \x3c!--submitted on time but not graded/posted--\x3e\n            <span class="details ellipsis submitted js-submitted-date" ng-if="!gradingBar.isSubmittedLate() && attempt.isPrePostGrade()" bb-translate translate-values="{date: attempt.attemptDate}">\n              components.directives.grade.grading-bar.submit-date\n            </span>\n            \x3c!--submitted late but not yet graded/posted--\x3e\n            <span ng-if="gradingBar.isSubmittedLate() && attempt.isPrePostGrade() && !gradingBar.isExempted(attempt.gradeId)" class="show-hide-on-hover">\n              <span class="details ellipsis submitted show-on-hover text-alert-ax js-submitted-late-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                components.directives.grade.grading-bar.submit-late-date\n              </span>\n              <span class="details ellipsis hide-on-hover text-alert-ax js-submitted-late-date" bb-translate translate-values="{lateness: gradingBar.localizedLateness}">\n                components.directives.grade.grading-bar.submit-lateness\n              </span>\n            </span>\n            \x3c!--attempt has been graded/posted--\x3e\n            <span ng-if="attempt.isDisplayablePostedGrade()" class="show-hide-on-hover">\n              \x3c!--submitted late--\x3e\n              <span ng-if="gradingBar.isSubmittedLate() && !gradingBar.isExempted(attempt.gradeId)" class="details ellipsis submitted show-on-hover text-alert-ax js-submitted-late-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                components.directives.grade.grading-bar.submit-late-date\n              </span>\n              \x3c!--submitted on time--\x3e\n              <span ng-if="!gradingBar.isSubmittedLate()" class="details ellipsis submitted show-on-hover js-submitted-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                components.directives.grade.grading-bar.submit-date\n              </span>\n              <span class="details ellipsis hide-on-hover posted js-posted-indicator" bb-translate translate-values="{date: attempt.attemptLastGradedDate || \'\'}">\n                components.directives.grade.grading-bar.posted\n              </span>\n            </span>\n            <span class="submission-total-size" bb-translate translate-values="{size: gradingBar.getLocalizedSubmissionTotalSize(attempt)}">\n              components.directives.grade.grading-bar.submission-total-size\n            </span>\n          </span>\n          <div class="attempt-receipt-info">\n            <span class="attempt-receipt-label" bb-translate>components.directives.grade.grading-bar.submission-receipt-number</span>\n            <span class="attempt-receipt-id">{{ gradingBar.getAttemptReceiptIdToDisplay() }}</span>\n          </div>\n        </span>\n        \x3c!-- BEGIN Enhance time limit --\x3e\n        <span class="information-about-time-limit show-hide-on-hover" ng-if="gradingBar.isShowExtraTime()">\n          <span class="exceeded-time attention hide-on-hover details small-medium-show">{{gradingBar.getExceedTime()}}</span>\n          <span class="questions-answered-correctly-after-time-limit attention show-on-hover details small-medium-hide" bb-translate translate-values="{count: gradingBar.getQuestionsAnsweredAfterSoftTimeLimit().length}">\n            components.directives.grade.grading-bar.questions-answered-after-soft-time-limit.plural\n          </span>\n        </span>\n        \x3c!--  END  Enhance time limit --\x3e\n      </div>\n\n      <div class="attempt-status-container" ng-if="attemptStatus">{{attemptStatus}}</div>\n\n      <div class="receipt-and-attempt-actions multiple-submissions-receipt-and-attempt-actions">\n        <div class="attempt-receipt-info full-panel-only">\n          <span class="attempt-receipt-label" bb-translate>components.directives.grade.grading-bar.submission-receipt-number</span>\n          <div class="attempt-receipt-id">{{ gradingBar.getAttemptReceiptIdToDisplay() }}</div>\n        </div>\n\n        <div class="attempt-grading-actions multiple-attempts-grading-actions">\n          \x3c!-- TODO: LRN-194211 - Remove when the feature flag behind the property is removed. --\x3e\n          \x3c!-- There is no override for non-group attempt grade. Therefore, if save-as-override is true, make the pill read-only --\x3e\n          <bb-user-attempt-grade-input\n            ng-if="::!column().isGroupContent()"\n            class="pill-spacing"\n            ng-class="{\'has-feedback\': (gradingBar.canEnterGrades || gradingBar.canEnterFeedback || gradingBar.gradingCommentHandler.hasComment()) && !disableFeedbackButtons}"\n            ng-hide="hideGrade()"\n            id="{{::\'attempt_\' + attempt.id}}"\n            readonly="::(!gradingBar.canEnterGrades || saveAsOverride())"\n            column="::column()"\n            attempt="attempt"\n            for-user="::user()"\n            input-aria-label="{{gradingBar.inputGradeAriaLabel}}"\n            disable-rubric-eval-click="disableRubricAction()">\n          </bb-user-attempt-grade-input>\n          <bb-group-attempt-grade-input\n            ng-if="::column().isGroupContent()"\n            class="pill-spacing"\n            ng-class="{\'has-feedback\': (gradingBar.canEnterGrades || gradingBar.canEnterFeedback || gradingBar.gradingCommentHandler.hasComment()) && !disableFeedbackButtons}"\n            ng-hide="hideGrade()"\n            id="{{::\'attempt_\' + attempt.id}}"\n            readonly="::(!gradingBar.canEnterGrades || saveAsOverride())"\n            column="::column()"\n            attempt="attempt"\n            for-group="::row.group"\n            input-aria-label="{{gradingBar.inputGradeAriaLabel}}"\n            disable-rubric-eval-click="disableRubricAction()">\n          </bb-group-attempt-grade-input>\n\n          \x3c!--When no comments exist this is either an \'add comment\' or \'empty comment\' button, otherwise it functions as a toggle button to bring the comments in/out of view--\x3e\n          <button class="toggle-comments-button"\n                  ng-if="gradingBar.showCommentIcon() && !disableFeedbackButtons"\n                  ng-click="gradingBar.openFeedbackPanel()"\n                  ng-switch="gradingBar.getCommentIconType()"\n                  bb-translate-attrs="{\'aria-label\': \'components.directives.grade.grading-bar.instructor-comments.aria-label.comments-toggle-button\'}"\n                  analytics-id="components.directives.grade.gradingBar.instructorComments.toggle.button">\n            <bb-svg-icon ng-switch-when="add" size="medium" icon="add-feedback"></bb-svg-icon>\n            <bb-svg-icon ng-switch-when="view" ng-show="gradingBar.hasComment()" size="medium" icon="feedback" status="active"></bb-svg-icon>\n            <bb-svg-icon ng-switch-default size="medium" icon="feedback"></bb-svg-icon>\n          </button>\n\n          \x3c!-- Grading bar more students arrow icon --\x3e\n          <div ng-if="gradingBar.dropDownList && gradingBar.dropDownList.group">\n            <button bb-guidance-target component-key="group-individual-feedback-ftue"\n                    id="{{ \'according_toggle_button\' + dropDownList.attempt.id }}"\n                    class="add-feedback-button"\n                    ng-click="gradingBar.dropDownList.toggleUserList()"\n                    role="button"\n                    aria-expanded="{{ gradingBar.dropDownList.groupAccordingStatus() }}"\n                    aria-controls="{{ \'according_toggle_panel\' + dropDownList.attempt.id }}"\n                    bb-translate-attrs="{\'aria-label\': \'components.directives.grade.grading-bar.accordion-aria-label\'}"\n                    translate-attrs-values="{group: gradingBar.dropDownList.group.title}"\n                    analytics-id="components.directives.grade.gradingBar.dropDownList.userList.toggle.button">\n              <bb-svg-icon size="custom"\n                            icon="arrow-down"\n                            class="grading-bar-arrow"\n                            ng-class="{\'rotate-arrow\': gradingBar.dropDownList.showDetail}"\n                            aria-hidden="true"\n                            role="presentation">\n              </bb-svg-icon>\n            </button>\n            <bb-guidance component-key="group-individual-feedback-ftue"\n                          id="guidance-moment-item-individual-feedback"\n                          class="guidance-element-overlay" role="tooltip">\n              <bb-translate>components.directives.grade.grading-bar.individual-feedback-ftue</bb-translate>\n            </bb-guidance>\n          </div>\n\n          <bb-overflow-menu ng-show="gradingBar.showOverflowMenu()"\n                            element-id="{{\'attempt-menu-open-button_\' + attempt.id}}"\n                            element-name="{{gradingBar.getLabelForAttempt()}}"\n                            menu-items="gradingBar.getOverflowMenuItems()"\n                            analytics-id-tag-prefix="components.directives.grade.grading-bar.multipleSubmissions.overflowMenu">\n          </bb-overflow-menu>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  \x3c!-- Group Member Lists --\x3e\n  \x3c!-- TODO: LRN-194211 - Remove ng-class when the feature flag behind the property is removed. --\x3e\n  <div id="{{ \'according_toggle_panel\' + dropDownList.attempt.id }}"\n       class="single-submission-grading-bar attempt-grading-bar user-list-style"\n       ng-class="{\'isUserListAttemptNavigationEnabled\': gradingBar.showAttemptSelector()}"\n       ng-if="gradingBar.dropDownList && gradingBar.dropDownList.group && gradingBar.dropDownList.userList && gradingBar.dropDownList.showDetail"\n       aria-labelledby="{{ \'according_toggle_button\' + dropDownList.attempt.id }}">\n    \x3c!-- Submission list user list --\x3e\n    <ul>\n      <li ng-repeat="user in gradingBar.dropDownList.userList | limitTo:gradingBar.dropDownList.visibleUsersCount track by $index"\n          class="user-row js-user-{{::user.id}} user-list-top-border"\n          role="presentation">\n        <div class="user-list-wrapper attempt-grading-bar-inner">\n          \x3c!-- Avatar --\x3e\n          <div class="user-avatar">\n            <bb-avatar user="user" auto-update="true" inactive="!gradingBar.dropDownList.isUserCourseAvailable(user.id)"></bb-avatar>\n          </div>\n          \x3c!-- User name --\x3e\n          <div class="attempt-info user-name ellipsis" tabindex="0">\n            <bb-username user="user" format="short" auto-update="true"></bb-username>\n            <div ng-if="selectedUser === user" class="sub-text" ng-bind-html="selectedText"></div>\n          </div>\n          \x3c!-- User action: open feedback --\x3e\n          <div class="attempt-grading-actions">\n            <button id="individual-comments{{::user.id}}"\n                    class="individual-feedback-icon"\n                    role="button"\n                    type="button"\n                    ng-if="gradingBar.dropDownList.showCommentIcon()"\n                    ng-click="gradingBar.dropDownList.openFeedbackPanel(user.id, true)"\n                    ng-switch="gradingBar.dropDownList.getGroupIndividualCommentIconType(user.id)"\n                    aria-label="{{::gradingBar.individualFeedbackAriaLabel($index)}}"\n                    analytics-id="components.directives.grade.gradingBar.openFeedback.panel.button" >\n              <bb-svg-icon ng-switch-when="add" size="medium" icon="add-feedback"></bb-svg-icon>\n              <bb-svg-icon ng-switch-when="view" size="medium" icon="feedback" status="active"></bb-svg-icon>\n              <bb-svg-icon ng-switch-default size="medium" icon="feedback"></bb-svg-icon>\n            </button>\n          </div>\n        </div>\n      </li>\n      \x3c!-- Show more button --\x3e\n      <li ng-if="gradingBar.dropDownList.shouldShowMoreOrLess()"\n          class="show-all-users user-row">\n        <div class="user-list-wrapper attempt-grading-bar-inner">\n          <div class="show-more-actions">\n            <button class="button button--text text"\n                    ng-class="{\'show-more-button\': gradingBar.dropDownList.userList.length > gradingBar.dropDownList.visibleUsersCount,\n                                \'show-less-button\': gradingBar.dropDownList.userList.length === gradingBar.dropDownList.visibleUsersCount}"\n                    ng-click="gradingBar.dropDownList.showMoreOrLessControl()"\n                    bb-click-focus="li.user-row div.user-list-wrapper div.attempt-info.user-name"\n                    index-to-focus="{{ gradingBar.dropDownList.userList.length > gradingBar.dropDownList.visibleUsersCount ? 0 : gradingBar.dropDownList.MAX_USERS_VISIBLE }}"\n                    bb-translate="{{ gradingBar.dropDownList.showMoreOrLessTranslationKey() }}"\n                    translate-values="{count: gradingBar.dropDownList.hiddenUsersCount()}"\n                    analytics-id="{{ gradingBar.dropDownList.showMoreOrLessTranslationKey() }}" >\n            </button>\n          </div>\n        </div>\n      </li>\n    </ul>\n  </div>\n</form>\n'},Gg10:function(e,t,i){},IoN1:function(e,t){e.exports='<form name="{{::\'top_grading_bar\' + gradeDetail.id}}" bb-first-time-container>\n  \x3c!-- TODO: LRN-194211 - Remove ng-class when the feature flag behind the property is removed. --\x3e\n  <div class="single-submission-grading-bar attempt-grading-bar"\n       ng-class="{\'add-comment-expanded\': gradingBar.gradingCommentHandler.commentPanelOpen, \'isGradingBarAttemptNavigationEnabled\': gradingBar.isGradingBarAttemptNavigationEnabled}"\n       bb-foundation-defer>\n    <div class="attempt-grading-bar-inner">\n\n      \x3c!-- TODO: LRN-194211 - Remove this when the feature flag behind the property is removed. --\x3e\n      <i bb-feature-toggle="!feature.content.course.grading.bar.attempt.navigation"\n         class="icon submission-type-icon"\n         bb-content-item-icon content-column="::column()">\n      </i>\n\n      \x3c!-- TODO: LRN-194211 - Replace ng-class with class when the feature flag behind the property is removed. --\x3e\n      <div class="attempt-info-wrapper">\n        <div class="attempt-info">\n          <span class="name ellipsis" bb-translate>components.directives.grade.grading-bar.submission</span>\n          <span class="submission-details-wrap" ng-class="{\'show-hide-on-hover\': (gradeDetail.isPosted() && !gradingBar.isPeerGrading())}" ng-if="attempt && gradingBar.showSubmissionInfo()">\n            <span class="details-container">\n              \x3c!--submitted on time but not graded/posted--\x3e\n              <span class="details ellipsis submitted js-submitted-date" ng-if="!gradingBar.isSubmittedLate() && !gradeDetail.isPosted()" bb-translate translate-values="{date: attempt.attemptDate}">\n                components.directives.grade.grading-bar.submit-date\n              </span>\n              \x3c!--submitted late but not yet graded/posted--\x3e\n              <span ng-if="gradingBar.isSubmittedLate() && !gradeDetail.isPosted()" class="show-hide-on-hover">\n                <span class="details ellipsis submitted show-on-hover text-alert-ax js-submitted-late-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                  components.directives.grade.grading-bar.submit-late-date\n                </span>\n                <span class="details ellipsis hide-on-hover text-alert-ax js-submitted-late-date" bb-translate translate-values="{lateness: gradingBar.localizedLateness}">\n                  components.directives.grade.grading-bar.submit-lateness\n                </span>\n              </span>\n              \x3c!--attempt has been graded/posted--\x3e\n              <span ng-if="gradeDetail.isPosted()" class="show-hide-on-hover">\n                \x3c!--submitted late--\x3e\n                <span ng-if="gradingBar.isSubmittedLate() && !gradeDetail.isExempt" ng-class="{\'show-on-hover\': !column().anonymousGrading}" class="details ellipsis submitted text-alert-ax js-submitted-late-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                  components.directives.grade.grading-bar.submit-late-date\n                </span>\n                \x3c!--submitted on time--\x3e\n                <span ng-if="!gradingBar.isSubmittedLate()" ng-class="{\'show-on-hover\': !column().anonymousGrading}" class="details ellipsis submitted js-submitted-date"  bb-translate translate-values="{date: attempt.attemptDate}">\n                  components.directives.grade.grading-bar.submit-date\n                </span>\n                \x3c!--posted with an attempt graded date--\x3e\n                <span ng-if="attempt.attemptLastGradedDate && !column().anonymousGrading" class="details ellipsis hide-on-hover posted js-posted-indicator" bb-translate translate-values="{date: attempt.attemptLastGradedDate}">\n                  components.directives.grade.grading-bar.posted\n                </span>\n                \x3c!--overridden without an attempt graded date--\x3e\n                <span ng-if="!attempt.attemptLastGradedDate && !column().anonymousGrading" class="details ellipsis hide-on-hover posted js-posted-indicator">\n                  <span class="posted-text" bb-translate>components.directives.grade.grading-bar.posted-no-date</span>\n                </span>\n              </span>\n              <span class="submission-total-size" bb-translate translate-values="{size: gradingBar.getLocalizedSubmissionTotalSize(attempt)}">\n                components.directives.grade.grading-bar.submission-total-size\n              </span>\n            </span>\n            \x3c!--Peer Review Status Bar--\x3e\n            <span ng-if="::gradingBar.isPeerGrading()">\n              <bb-peer-review-status class="peer-review-status"\n                column="column()"\n                reviews-completed="gradingBar.numOfPeerReviewsCompleted"\n                reviews-completed-late="gradingBar.numOfPeerReviewsCompletedLate"\n                reviews-started="gradingBar.numOfPeerReviewsStarted"\n                has-due-date-exception="gradingBar.hasDueDateException">\n              </bb-peer-review-status>\n            </span>\n\n            <div class="attempt-receipt-info medium-attempt-receipt">\n              <span class="attempt-receipt-label" bb-translate>components.directives.grade.grading-bar.submission-receipt-number</span>\n              <span class="attempt-receipt-id">{{ gradingBar.getAttemptReceiptIdToDisplay() }}</span>\n            </div>\n\n          </span>\n          \x3c!-- BEGIN Enhance time limit --\x3e\n          <span class="information-about-time-limit show-hide-on-hover" ng-if="gradingBar.isShowExtraTime() && gradingBar.showSubmissionInfo()">\n            <span class="exceeded-time attention hide-on-hover details small-medium-show">{{gradingBar.getExceedTime()}}</span>\n            <span class="questions-answered-correctly-after-time-limit attention show-on-hover details small-medium-hide" bb-translate translate-values="{count: gradingBar.getQuestionsAnsweredAfterSoftTimeLimit().length}">\n              components.directives.grade.grading-bar.questions-answered-after-soft-time-limit.plural\n            </span>\n          </span>\n          \x3c!--  END  Enhance time limit --\x3e\n        </div>\n      </div>\n\n      <div class="receipt-and-attempt-actions">\n        <div class="attempt-receipt-info full-panel-only single-attempt-submission-details">\n          <span class="attempt-receipt-label" bb-translate>components.directives.grade.grading-bar.submission-receipt-number</span>\n          <span class="attempt-receipt-id">{{ gradingBar.getAttemptReceiptIdToDisplay() }}</span>\n        </div>\n\n        \x3c!-- TODO: LRN-194211 - Remove this instance of the override when the feature flag behind the property is removed. --\x3e\n        <div class="undo-override"\n             ng-if="gradingBar.shouldShowOverrideIndicator() && !gradingBar.showAttemptSelector()"\n             ng-switch="gradingBar.canGrade()">\n          <a\n            ng-switch-when="true"\n            ng-if="!gradeDetail.isPastDueZero()"\n            href="javascript:void(0);"\n            data-class="js-undo-override"\n            ng-click="gradingBar.undoOverride()"\n            analytics-id="components.directives.grade.grading-bar.undo-override"\n            bb-translate>\n            components.directives.grade.grading-bar.undo-override\n          </a>\n          <span ng-switch-default class="override-indicator" bb-translate>components.directives.grade.grading-bar.readonly-override</span>\n        </div>\n\n        <div class="attempt-grading-actions">\n          <div class="undo-override"\n               ng-if="gradingBar.shouldShowOverrideIndicator() && gradingBar.showAttemptSelector()"\n               ng-switch="gradingBar.canGrade()">\n            <a\n              ng-switch-when="true"\n              ng-if="!gradeDetail.isPastDueZero()"\n              href="javascript:void(0);"\n              data-class="js-undo-override"\n              ng-click="gradingBar.undoOverride()"\n              analytics-id="components.directives.grade.grading-bar.undo-override"\n              bb-translate>\n              components.directives.grade.grading-bar.undo-override\n            </a>\n            <span ng-switch-default class="override-indicator" bb-translate>components.directives.grade.grading-bar.readonly-override</span>\n          </div>\n\n          <bb-grade-input\n            ng-if="gradingBar.showGradeDetailGradepill"\n            ng-hide="hideGrade()"\n            ng-class="{\'has-feedback\': (gradingBar.canGrade() || gradingBar.gradingCommentHandler.hasComment()) && !disableFeedbackButtons}"\n            class="pill-spacing"\n            id="grading-bar-grade-input"\n            grade-detail="gradeDetail"\n            for-user="::user()"\n            column="::column()"\n            override="saveAsOverride()"\n            enable-rubric-eval-action="true"\n            has-rubric-clear-confirmation-callout="gradingBar.getClearConfirmationCallout && gradingBar.getClearConfirmationCallout()"\n            disable-rubric-eval-click="disableRubricAction()"\n            enable-editable-input-mode="enableEditableInputMode">\n          </bb-grade-input>\n          \x3c!-- Group grading pill --\x3e\n          <bb-grade-input\n            ng-if="gradingBar.canGrade() && row.group && !column().delegatedGrading"\n            ng-hide="hideGrade()"\n            id="grading-bar-group-grade-input"\n            grade-detail="gradeDetail"\n            for-group="row.group"\n            column="::column()"\n            override="saveAsOverride()"\n            enable-rubric-eval-action="true"\n            has-rubric-clear-confirmation-callout="gradingBar.getClearConfirmationCallout && gradingBar.getClearConfirmationCallout()"\n            disable-rubric-eval-click="disableRubricAction()"\n            enable-editable-input-mode="enableEditableInputMode"\n            class="group-grading-input-pill pill-spacing"\n            ng-class="{\'has-feedback\': (gradingBar.canGrade() || gradingBar.gradingCommentHandler.hasComment()) && !disableFeedbackButtons}"\n            is-group-grade-multiple="row.grade.ui.isGroupGradeMultiple"\n            is-group-grade-in-progress="row.isGroupGradeInProgress">\n          </bb-grade-input>\n          \x3c!-- For anonymous grading show attempt grading pill --\x3e\n          <bb-user-attempt-grade-input\n            ng-if="gradingBar.canGrade() && gradeDetail.user && (column().anonymousGrading || column().delegatedGrading && !column().peerGrading)"\n            ng-hide="hideGrade()"\n            ng-class="{\'has-feedback\': (gradingBar.canGrade() || gradingBar.canEnterFeedback || gradingBar.gradingCommentHandler.hasComment()) && !disableFeedbackButtons}"\n            class="pill-spacing"\n            id="user-attempt-grade-input"\n            attempt="attempt"\n            for-user="::user()"\n            column="::column()"\n            enable-rubric-eval-action="true"\n            has-rubric-clear-confirmation-callout="gradingBar.getClearConfirmationCallout && gradingBar.getClearConfirmationCallout()"\n            disable-rubric-eval-click="disableRubricAction()"\n            enable-editable-input-mode="enableEditableInputMode"\n            readonly="isReadonly()">\n          </bb-user-attempt-grade-input>\n          \x3c!-- For read only grade pill --\x3e\n          <bb-display-grade-pill\n            ng-if="!gradingBar.canGrade() && gradingBar.canSeeGradePillForStudentReviewer()"\n            ng-class="{\'has-feedback\': gradingBar.gradingCommentHandler.hasComment() && !disableFeedbackButtons}"\n            class="pill-spacing"\n            id="{{::\'display_grade_\' + gradeDetail.id || row.group.id}}"\n            column="::column()"\n            grade="gradeDetail"\n            hideRubricIcon="hideRubricIcon"\n            disable-rubric-eval-click="disableRubricAction()">\n          </bb-display-grade-pill>\n\n          <button class="toggle-comments-button"\n                  ng-if="gradingBar.showCommentIcon() && !disableFeedbackButtons"\n                  ng-click="gradingBar.openFeedbackPanel(gradeDetail.user.id)"\n                  ng-switch="gradingBar.getCommentIconType()"\n                  bb-translate-attrs="{\'aria-label\': \'components.directives.grade.grading-bar.instructor-comments.aria-label.comments-toggle-button\'}"\n                  analytics-id="components.directives.grade.gradingBar.instructorComments.toggle.button" >\n            <bb-svg-icon ng-switch-when="add" size="medium" icon="add-feedback"></bb-svg-icon>\n            <bb-svg-icon ng-switch-when="view" size="medium" icon="feedback" status="active"></bb-svg-icon>\n            <bb-svg-icon ng-switch-default size="medium" icon="feedback"></bb-svg-icon>\n          </button>\n\n          \x3c!-- Grading bar more students arrow icon --\x3e\n          <div ng-if="gradingBar.dropDownList && gradingBar.dropDownList.group">\n            <button bb-guidance-target component-key="group-individual-feedback-ftue"\n                    id="{{ \'according_toggle_button\' + dropDownList.attempt.id }}"\n                    class="add-feedback-button"\n                    ng-click="gradingBar.dropDownList.toggleUserList()"\n                    role="button"\n                    bb-translate-attrs="{\'aria-label\': \'components.directives.grade.grading-bar.accordion-aria-label\'}"\n                    translate-attrs-values="{group: gradingBar.dropDownList.group.title}"\n                    aria-expanded="{{ gradingBar.dropDownList.groupAccordingStatus() }}"\n                    aria-controls="{{ \'according_toggle_panel\' + dropDownList.attempt.id }}"\n                    analytics-id="components.directives.grade.gradingBar.userList.toggle.button">\n              <bb-svg-icon size="custom"\n                          icon="arrow-down"\n                          class="grading-bar-arrow"\n                          ng-class="{\'rotate-arrow\': gradingBar.dropDownList.showDetail}"\n                          aria-hidden="true"\n                          role="presentation">\n              </bb-svg-icon>\n            </button>\n            <bb-guidance component-key="group-individual-feedback-ftue"\n                        id="guidance-moment-item-individual-feedback"\n                        class="guidance-element-overlay" role="tooltip">\n              <bb-translate>components.directives.grade.grading-bar.individual-feedback-ftue</bb-translate>\n            </bb-guidance>\n          </div>\n\n          <bb-overflow-menu ng-show="gradingBar.showOverflowMenu()"\n                            element-id="{{\'attempt-menu-open-button_\' + attempt.id}}"\n                            element-name="{{gradingBar.getLocalizedTextByKey(\'components.directives.grade.grading-bar.grade\')}}"\n                            menu-items="gradingBar.getOverflowMenuItems()"\n                            analytics-id-tag-prefix="components.directives.grade.grading-bar.single-submission-attempt-privileged.overflowMenu">\n          </bb-overflow-menu>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  \x3c!-- Group Member Lists --\x3e\n  <div id="{{ \'according_toggle_panel\' + dropDownList.attempt.id }}"\n       class="single-submission-grading-bar attempt-grading-bar user-list-style"\n       ng-if="gradingBar.dropDownList && gradingBar.dropDownList.group && gradingBar.dropDownList.userList && gradingBar.dropDownList.showDetail"\n       aria-labelledby="{{ \'according_toggle_button\' + dropDownList.attempt.id }}">\n    \x3c!-- Submission list user list --\x3e\n    <ul>\n      <li ng-repeat="user in gradingBar.dropDownList.userList | limitTo:gradingBar.dropDownList.visibleUsersCount track by $index"\n          class="user-row js-user-{{::user.id}} user-list-top-border"\n          role="presentation">\n        <div class="user-list-wrapper attempt-grading-bar-inner">\n          \x3c!-- Avatar --\x3e\n          <div class="user-avatar">\n            <bb-avatar user="user" auto-update="true" inactive="!gradingBar.dropDownList.isUserCourseAvailable(user.id)"></bb-avatar>\n          </div>\n          \x3c!-- User name --\x3e\n          <div class="attempt-info user-name ellipsis" tabindex="0">\n            <bb-username user="user" format="short" auto-update="true"></bb-username>\n            <div ng-if="selectedUser === user" class="sub-text" ng-bind-html="selectedText"></div>\n          </div>\n          \x3c!-- User action: open feedback --\x3e\n          <div class="attempt-grading-actions">\n            <button id="individual-comments{{::user.id}}"\n                    class="individual-feedback-icon"\n                    role="button"\n                    type="button"\n                    ng-if="gradingBar.dropDownList.showCommentIcon()"\n                    ng-click="gradingBar.dropDownList.openFeedbackPanel(user.id, true)"\n                    ng-switch="gradingBar.dropDownList.getGroupIndividualCommentIconType(user.id)"\n                    bb-translate-attrs="{\'aria-label\': \'components.directives.grade.grading-bar.instructor-comments.aria-label.comments-toggle-button\'}"\n                    analytics-id="components.directives.grade.gradingBar.openFeedback.panel.button" >\n              <bb-svg-icon ng-switch-when="add" size="medium" icon="add-feedback"></bb-svg-icon>\n              <bb-svg-icon ng-switch-when="view" size="medium" icon="feedback" status="active"></bb-svg-icon>\n              <bb-svg-icon ng-switch-default size="medium" icon="feedback"></bb-svg-icon>\n            </button>\n          </div>\n        </div>\n      </li>\n      \x3c!-- Show more button --\x3e\n      <li ng-if="gradingBar.dropDownList.shouldShowMoreOrLess()"\n          class="show-all-users user-row">\n        <div class="user-list-wrapper attempt-grading-bar-inner">\n          <div class="show-more-actions">\n            <button class="button button--text text"\n                    ng-class="{\'show-more-button\': gradingBar.dropDownList.userList.length > gradingBar.dropDownList.visibleUsersCount,\n                               \'show-less-button\': gradingBar.dropDownList.userList.length === gradingBar.dropDownList.visibleUsersCount}"\n                    ng-click="gradingBar.dropDownList.showMoreOrLessControl()"\n                    bb-click-focus="li.user-row div.user-list-wrapper div.attempt-info.user-name"\n                    index-to-focus="{{ gradingBar.dropDownList.userList.length > gradingBar.dropDownList.visibleUsersCount ? 0 : gradingBar.dropDownList.MAX_USERS_VISIBLE }}"\n                    bb-translate="{{ gradingBar.dropDownList.showMoreOrLessTranslationKey() }}"\n                    translate-values="{count: gradingBar.dropDownList.hiddenUsersCount()}"\n                    analytics-id="{{ gradingBar.dropDownList.showMoreOrLessTranslationKey() }}" >\n            </button>\n          </div>\n        </div>\n      </li>\n    </ul>\n  </div>\n</form>\n'},MzGC:function(e,t,i){"use strict";i.d(t,"b",(function(){return m})),i.d(t,"a",(function(){return u}));var a=i("D57K"),n=i("Llzl"),s=i("gIKX"),r=i("0JpG"),o=i("yMoE"),d=i("o5Lu"),c=i("8jzW"),l=i("lEL+"),p=i("TnpK"),g=i("aHpC");const m="ultra.components.directives.grade.input.userAttemptGradeInput",u="user-attempt-grade-save";let b=class extends s.b{constructor(e,t,i,a,n,s,r,o,d,c,l){super(t,i,a,n,s,r,o,d,c),this.$rootScope=e,this.$q=t,this.$injector=i,this.scope=a,this.element=n,this.form=s,this.bbLocalize=r,this.grade=o,this.timeout=d,this.ultraState=c,this.scoreProviderHelperService=l,this.scope.$on(u,((e,t)=>{this.setGradeAndSave(t)})),this.scope.column().anonymousGrading&&this.scope.$watch("gradeDetail.ui.attempt.displayGrade",(e=>{e&&this.updateWithNewGrade(e.score)}))}afterSave(e){this.gradeDisplayItem.displayGrade=e.displayGrade,this.scope.attempt.displayGrade=e.displayGrade}getRubricEvalStateAndArgs(){return{state:this.scoreProviderHelperService.gradingWithRubricStateRef(this.scope.column().scoreProviderHandle,null),args:{userId:this.scope.forUser().$pk||this.scope.forUser().id,groupId:null,courseId:this.scope.column().courseId,columnId:this.scope.column().id,contentId:this.scope.column().contentId,gradeId:this.scope.attempt.gradeId,attemptId:this.scope.attempt.id}}}getWatchGroup(){return super.getWatchGroup().concat(["attempt.id","attempt.displayGrade"])}instantiateGradeDisplayItem(){return this.$injector.instantiate(o.a,{gradeDetail:null,scope:this.scope})}isRubricEvalMode(){return this.isRubricAssociated()}shouldShowInput(){return!this.isRubricEvalMode()||this.isRubricEvalMode()&&this.scope.enableEditableInputMode}refreshInputBox(){super.refreshInputBox(),this.gradeDisplayItem.displayGrade=this.scope.attempt.displayGrade,this.updateGradeColor()}setupGradeSubmission(){const e=this.createGradeSubmissionNow();return e.attemptId=this.scope.attempt.id,e.userId=this.scope.forUser().id,e.clearGrade&&(e.setAttemptToEmpty=!0),this.$q.when(e)}};b=Object(a.a)([Object(a.c)(0,Object(g.b)("$rootScope")),Object(a.c)(1,Object(g.b)("$q")),Object(a.c)(2,Object(g.b)("$injector")),Object(a.c)(3,Object(g.b)("scope")),Object(a.c)(4,Object(g.b)("element")),Object(a.c)(5,Object(g.b)("form")),Object(a.c)(6,Object(g.b)(r.serviceName)),Object(a.c)(7,Object(g.b)(d.n)),Object(a.c)(8,Object(g.b)(l.b)),Object(a.c)(9,Object(g.b)(p.d)),Object(a.c)(10,Object(g.b)(c.c))],b);class h{constructor(e){this.$injector=e,this.restrict="E",this.require="^form",this.template=s.d,this.scope={attempt:"=",column:"&",gradeDetail:"=?",disableRubricEvalClick:"&?",enableEditableInputMode:"&?",forUser:"&",id:"@",inputAriaLabel:"@?",readonly:"&",hasRubricClearConfirmationCallout:"<?"},this.link=(e,t,i,a)=>{e.input=this.$injector.instantiate(b,{scope:e,element:t,form:a})}}}h.$inject=["$injector"],n.module(m,[s.c]).directive("bbUserAttemptGradeInput",["$injector",e=>e.instantiate(h)])},Np64:function(e,t,i){"use strict";i.d(t,"b",(function(){return n})),i.d(t,"a",(function(){return s}));var a=i("nsO7");function n(e,t){const i=a.findIndex(e,t);if(null!=i){const t=e.splice(i,1)[0];e.splice(0,0,t)}}function s(e,t){const i=t.length-1;return{next:()=>t[e<i?e+1:0],previous:()=>t[e<=0?i:e-1]}}},Tqav:function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var a=i("Llzl"),n=i("1ZbL"),s=i("IaSh");const r="ultra.components.directives.attempt-selection",o={Class:s.h,bindingNames:["attemptId","attemptOptions","onChange","pointsPossible","gradeSchema","autoFocus"],renderLocalized:!0};a.module(r,[]).component("bbAttemptSelection",Object(n.a)(o))},Uw4B:function(e,t,i){"use strict";i.d(t,"a",(function(){return l}));var a=i("Llzl"),n=i("gIKX"),s=i("0JpG"),r=i("yMoE"),o=i("o5Lu"),d=i("lEL+"),c=i("TnpK");const l="ultra.components.directives.grade.input.userFinalGradeInput";class p extends n.b{constructor(e,t,i,a,n,s,r,o,d){super(e,t,i,a,n,s,r,o,d),this.$injector=t,this.scope=i,this.bbLocalize=s}afterSave(e){this.scope.grade=e}getAriaLabelKey(){return super.getAriaLabelKey(!0)}getRubricEvalStateAndArgs(){return null}getWatchGroup(){return super.getWatchGroup().concat(["grade.id","grade.displayGrade"])}instantiateGradeDisplayItem(){return this.$injector.instantiate(r.a,{scope:this.scope,gradeDetail:this.scope.grade})}isRubricEvalMode(){return!1}shouldShowInput(){return!0}hasAggregationModel(){var e,t;return!!(null===(t=null===(e=this.gradeDisplayItem)||void 0===e?void 0:e.column)||void 0===t?void 0:t.aggregationModel)}refreshInputBox(){super.refreshInputBox(),this.gradeDisplayItem.displayGrade=this.scope.grade.displayGrade,this.updateGradeColor()}setupGradeSubmission(){const e=this.createGradeSubmissionNow();return e.userId=this.scope.forUser().id,e.gradeId=this.scope.grade.id,e.clearGrade&&(e.setGradeToEmpty=!0),this.$q.when(e)}get totalPoints(){return this.scope.grade.pointsPossible}}p.$inject=["$q","$injector","scope","element","form",s.serviceName,o.n,d.b,c.d];class g{constructor(e){this.$injector=e,this.restrict="E",this.require="^form",this.template=n.d,this.scope={column:"&",forUser:"&",grade:"=",id:"@",inputAriaLabel:"@?",showOverrideIndicator:"&?",readonly:"&"},this.link=(e,t,i,a)=>{e.input=this.$injector.instantiate(p,{scope:e,element:t,form:a})}}}g.$inject=["$injector"],a.module(l,[n.c]).directive("bbUserFinalGradeInput",["$injector",e=>e.instantiate(g)])},WByw:function(e,t){e.exports='<div bb-foundation-defer\n     class="single-submission-grading-bar attempt-grading-bar"\n     ng-class="{\'add-comment-expanded\': gradingBar.gradingCommentHandler.commentPanelOpen}">\n  <div bb-translate class="override-notification" ng-if="::gradingBar.aggregateGradingHandler.showOverrideIndicator()">\n    components.directives.grade.grading-bar.override-notification.single-submission\n  </div>\n  <div class="attempt-grading-bar-inner">\n\n    <i bb-content-item-icon class="icon submission-type-icon" content-column="::column()"></i>\n    <div class="attempt-info">\n      <span bb-translate class="name ellipsis">components.directives.grade.grading-bar.final-score</span>\n      <span class="submission-details-wrap peer-grading-flex-line" ng-if="attempt">\n        <span bb-translate class="details ellipsis submitted js-submitted-date" ng-if="!gradingBar.isSubmittedLate()"\n              translate-values="{date: attempt.attemptDate}">\n          components.directives.grade.grading-bar.submit-date\n        </span>\n        <span bb-translate\n              class="details ellipsis submitted text-alert-ax js-submitted-late-date"\n              ng-if="gradingBar.isSubmittedLate() && !gradeDetail.isExempt" translate-values="{date: attempt.attemptDate}">\n          components.directives.grade.grading-bar.submit-late-date\n        </span>\n        \x3c!--Peer Review Status Bar--\x3e\n        <span ng-if="::gradingBar.isPeerGrading()">\n          <bb-peer-review-status class="peer-review-status"\n            column="column()"\n            reviews-completed="gradingBar.numOfPeerReviewsCompleted"\n            reviews-completed-late="gradingBar.numOfPeerReviewsCompletedLate"\n            reviews-started="gradingBar.numOfPeerReviewsStarted"\n            has-due-date-exception="gradingBar.hasDueDateException">\n          </bb-peer-review-status>\n        </span>\n      </span>\n      \x3c!-- BEGIN Enhance time limit --\x3e\n      <span class="information-about-time-limit show-hide-on-hover"\n            ng-if="gradingBar.isCompleted() && gradingBar.isShowExtraTime()">\n        <span\n          class="exceeded-time attention hide-on-hover details small-medium-show">{{gradingBar.getExceedTime()}}</span>\n        <span bb-translate\n              class="questions-answered-correctly-after-time-limit attention show-on-hover details small-medium-hide"\n              translate-values="{count: gradingBar.getQuestionsAnsweredAfterSoftTimeLimit().length}">\n          components.directives.grade.grading-bar.questions-answered-after-soft-time-limit.plural\n        </span>\n      </span>\n      \x3c!--  END  Enhance time limit --\x3e\n    </div>\n\n    <div class="attempt-grading-actions">\n      <bb-display-grade-pill class="pill-spacing"\n                             column="::column()"\n                             disable-rubric-eval-click="disableRubricAction()"\n                             grade="::gradeDetail"\n                             ng-class="{\'has-feedback\': gradingBar.gradingCommentHandler.hasComment() && gradeDetail.isPosted()}"\n                             ng-hide="hideGrade()">\n      </bb-display-grade-pill>\n      <button analytics-id="components.directives.grade.gradingBar.feedbackPanel.open.button"\n              bb-translate-attrs="{\'aria-label\': \'components.directives.grade.grading-bar.instructor-comments.aria-label.comments-toggle-button\'}"\n              class="button super-clear toggle-comments-button"\n              ng-click="gradingBar.openFeedbackPanel()"\n              ng-if="gradingBar.showCommentIcon() && !disableFeedbackButtons"\n              ng-switch="gradingBar.getCommentIconType()">\n        <bb-svg-icon icon="feedback" ng-switch-when="view" size="medium" status="active"></bb-svg-icon>\n        \x3c!-- For non-privileged users, anything that is not \'view\' should just show an empty feedback icon --\x3e\n        <bb-svg-icon icon="feedback" ng-switch-default size="medium"></bb-svg-icon>\n      </button>\n      <bb-overflow-menu analytics-id-tag-prefix="components.directives.grade.grading-bar.single-submission-attempt.overflowMenu"\n                        element-id="{{\'attempt-menu-open-button_\' + attempt.id}}"\n                        element-name="{{gradingBar.getLocalizedTextByKey(\'components.directives.grade.grading-bar.grade\')}}"\n                        menu-items="gradingBar.getOverflowMenuItems()"\n                        ng-show="gradingBar.showOverflowMenu()">\n      </bb-overflow-menu>\n    </div>\n  </div>\n</div>\n'},ck5r:function(e,t){e.exports='<bb-modal class="notification"\n          modal-aria-type="alertdialog"\n          modal-translate-options="translateOpts"\n          analytics-id-tag-prefix="components.directives.grade.gradingBar.modal.deletePeerSubmissionWarning">\n  <div name="modal-contents">\n    <p bb-translate>{{::descriptionKey}}</p>\n    <ul class="modal-row">\n      <li ng-repeat="grader in graders" class="item">\n        <bb-username user="grader" format="long" auto-update="true"></bb-username>\n      </li>\n    </ul>\n  </div>\n  <button name="modal-footer-button-secondary"\n          ng-click="$parent.$dismiss()"\n          class="button button--secondary js-secondary-button"\n          bb-translate\n          analytics-id="components.directives.grade.gradingBar.modal.cancel">components.directives.grade.grading-bar.modal.cancel</button>\n  <button name="modal-footer-button-primary"\n          ng-click="deleteOnClick($parent.$close())"\n          class="button js-primary-button"\n          bb-translate\n          analytics-id="components.directives.grade.gradingBar.modal.continue">components.directives.grade.grading-bar.modal.continue</button>\n</bb-modal>\n\n'},gYaZ:function(e,t){e.exports='<div class="multiple-submissions-grading-bar attempt-grading-bar" ng-class="{\'add-comment-expanded\': gradingBar.gradingCommentHandler.commentPanelOpen}" bb-foundation-defer>\n  <div class="attempt-grading-bar-inner" bb-click-to-invoke-child="a.attempt-info-container" ng-switch="gradingBar.hasPeekState()">\n    <a href="javascript:void(0);"\n       class="attempt-info-container"\n       ng-switch-when="true"\n       ng-click="gradingBar.goToPeekState()"\n       analytics-id="components.directives.grade.gradingBar.goToPeekState.link">\n      <div class="attempt-info">\n        <span class="name ellipsis" ng-bind-html="::gradingBar.label"></span>\n        <span class="submission-details-wrap" ng-if="attempt" ng-switch="gradingBar.isSubmittedLate()">\n          <span class="details ellipsis submitted js-submitted-date" ng-switch-default bb-translate translate-values="{date: attempt.attemptDate}">\n            components.directives.grade.grading-bar.submit-date-without-timezone\n          </span>\n          <span class="details ellipsis submitted text-alert-ax js-submitted-late-date" ng-if="::!isGradeExempt" ng-switch-when="true" bb-translate translate-values="{date: attempt.attemptDate}">\n            components.directives.grade.grading-bar.submit-late-date-without-timezone\n          </span>\n        </span>\n      </div>\n    </a>\n    <i ng-switch-default class="icon submission-type-icon" bb-content-item-icon content-column="::column()"></i>\n    <div ng-switch-default class="attempt-info">\n      <span class="name ellipsis" ng-bind-html="::gradingBar.label"></span>\n      <span class="submission-details-wrap" ng-if="attempt" ng-switch="gradingBar.isSubmittedLate()">\n        <span class="details ellipsis submitted js-submitted-date" ng-switch-default bb-translate translate-values="{date: attempt.attemptDate}">\n          components.directives.grade.grading-bar.submit-date\n        </span>\n        <span class="details ellipsis submitted text-alert-ax js-submitted-late-date" ng-if="::!isGradeExempt" ng-switch-when="true" bb-translate translate-values="{date: attempt.attemptDate}">\n          components.directives.grade.grading-bar.submit-late-date\n        </span>\n      </span>\n      \x3c!-- BEGIN Enhance time limit --\x3e\n      <span class="information-about-time-limit show-hide-on-hover" ng-if="gradingBar.isCompleted() && gradingBar.isShowExtraTime()">\n        <span class="exceeded-time attention hide-on-hover details small-medium-show">{{gradingBar.getExceedTime()}}</span>\n        <span class="questions-answered-correctly-after-time-limit attention show-on-hover details small-medium-hide" bb-translate translate-values="{count: gradingBar.getQuestionsAnsweredAfterSoftTimeLimit().length}">\n          components.directives.grade.grading-bar.questions-answered-after-soft-time-limit.plural\n        </span>\n      </span>\n      \x3c!--  END  Enhance time limit --\x3e\n    </div>\n    <div class="attempt-grading-actions">\n      <bb-display-grade-pill\n              class="pill-spacing"\n              ng-class="{\'has-feedback\': gradingBar.gradingCommentHandler.hasComment()}"\n              column="::column()"\n              attempt="::attempt"\n              is-manual-status-posted="hasOverallGrade"\n              disable-rubric-eval-click="disableRubricAction()"></bb-display-grade-pill>\n      <button\n              class="toggle-comments-button"\n              ng-if="gradingBar.showCommentIcon() && !disableFeedbackButtons"\n              ng-click="gradingBar.openFeedbackPanel()"\n              ng-switch="gradingBar.getCommentIconType()"\n              bb-translate-attrs="{\'aria-label\': \'components.directives.grade.grading-bar.instructor-comments.aria-label.comments-toggle-button\'}"\n              analytics-id="components.directives.grade.gradingBar.commentsToggle.button">\n        <bb-svg-icon ng-switch-when="view" size="medium" icon="feedback" status="active"></bb-svg-icon>\n        \x3c!-- For non-privileged users, anything that is not \'view\' should just show an empty feedback icon --\x3e\n        <bb-svg-icon ng-switch-default size="medium" icon="feedback"></bb-svg-icon>\n      </button>\n      <bb-overflow-menu ng-show="gradingBar.showOverflowMenu()"\n                        element-id="{{\'attempt-menu-open-button_\' + attempt.id}}"\n                        element-name="{{gradingBar.getLocalizedTextByKey(\'components.directives.grade.grading-bar.grade\')}}"\n                        menu-items="gradingBar.getOverflowMenuItems()"\n                        analytics-id-tag-prefix="components.directives.grade.grading-bar.overflowMenu">\n      </bb-overflow-menu>\n    </div>\n  </div>\n</div>\n'},jagb:function(e,t,i){var a=i("ziER"),n=i("5JeM"),s=new a({id:"icon-custom-arrow-down",use:"icon-custom-arrow-down-usage",viewBox:"0 0 9 9",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 9 9" id="icon-custom-arrow-down"><path fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M1 3.41l3.524 3.18L8 3.41" /></symbol>'});n.add(s);e.exports=s},"uj+y":function(e,t,i){},vEAu:function(e,t){e.exports='<div class="multiple-submissions-grading-bar aggregate-grading-bar" bb-foundation-defer>\n  <div class="override-notification" ng-if="::gradingBar.showOverrideIndicator()" bb-translate>components.directives.grade.grading-bar.override-notification.multiple-submission</div>\n  <div class="aggregate-grading-bar-inner">\n    <div class="aggregate-header">\n      <span class="aggregate-header-text" bb-translate>components.directives.grade.grading-bar.final-score</span>\n      <span class="aggregate-header-sub-text" bb-translate>{{::gradingBar.getAggregationModelLabelKey()}}</span>\n    </div>\n\n    <bb-display-grade-pill grade="::gradeDetail" column="::column()"></bb-display-grade-pill>\n  </div>\n</div>'},yOHj:function(e,t,i){}}]);